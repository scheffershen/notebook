"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2089],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",P={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,f=u["".concat(p,".").concat(m)]||u[m]||P[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56922:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const i={},a="Does PHP-CS-Fixer replace or complement PHPCS/PHPCBF?",l={unversionedId:"Symfony/Code-Quality-Tools/Does PHP-CS-Fixer replace or complement PHPCS-PHPCBF",id:"Symfony/Code-Quality-Tools/Does PHP-CS-Fixer replace or complement PHPCS-PHPCBF",title:"Does PHP-CS-Fixer replace or complement PHPCS/PHPCBF?",description:"https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/3459",source:"@site/docs/Symfony/Code-Quality-Tools/Does PHP-CS-Fixer replace or complement PHPCS-PHPCBF.md",sourceDirName:"Symfony/Code-Quality-Tools",slug:"/Symfony/Code-Quality-Tools/Does PHP-CS-Fixer replace or complement PHPCS-PHPCBF",permalink:"/notebook/docs/Symfony/Code-Quality-Tools/Does PHP-CS-Fixer replace or complement PHPCS-PHPCBF",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Symfony/Code-Quality-Tools/Does PHP-CS-Fixer replace or complement PHPCS-PHPCBF.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"lexik/jwt-authentication-bundle",permalink:"/notebook/docs/Symfony/Bundles/jwt-Authentication-Bundle"},next:{title:"Introducing Object Calisthenics Rules for PHPStan",permalink:"/notebook/docs/Symfony/Code-Quality-Tools/Introducing Object Calisthenics Rules for PHPStan"}},p={},s=[],c={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"does-php-cs-fixer-replace-or-complement-phpcsphpcbf"},"Does PHP-CS-Fixer replace or complement PHPCS/PHPCBF?"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/3459"},"https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/3459")),(0,o.kt)("p",null,"Is it redundant for a project to use both PHPCS (and the corresponding fixer ",(0,o.kt)("em",{parentName:"p"},"phpcbf"),") and ",(0,o.kt)("em",{parentName:"p"},"PHP-CS-Fixer"),", or do the tools complement each other?"),(0,o.kt)("p",null,"Fixing (assuming configuration files are present)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ vendor/bin/php-cs-fixer fix --verbose\n$ vendor/bin/phpcbf \n")),(0,o.kt)("p",null,"Linting (again, assuming configuration files are present):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ vendor/bin/php-cs-fixer fix --dry-run --verbose\n$ vendor/bin/phpcs\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PHP Coding Standards Fixer"),' since beginning was created with "fixer" approach in mind, only fixer. The "linting" feature is just a side-effect of using ',(0,o.kt)("inlineCode",{parentName:"p"},"dry-run"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PHP Code Sniffer"),' was created with "linting" approach, and after few years of having PHP CS Fixer in ecosystem, PHPCS started to fix as well.'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PHP CS Fixer")," has almost 200 rules, ",(0,o.kt)("inlineCode",{parentName:"p"},"PHP CS Fixer"),", we do believe that the single tool per language is better approach, resulting with great tools like ",(0,o.kt)("inlineCode",{parentName:"p"},"tslint"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"eslint")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"css lint"),", style lint."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PHPCS"),' has 2 "big" features that are not present in ',(0,o.kt)("inlineCode",{parentName:"p"},"PHP CS Fixer")," by purpose - linting CSS and JS files."))}u.isMDXComponent=!0}}]);