"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[112],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(o),d=n,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return o?r.createElement(h,a(a({ref:t},c),{},{components:o})):r.createElement(h,a({ref:t},c))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:n,a[1]=l;for(var p=2;p<i;p++)a[p]=o[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},3140:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=o(7462),n=(o(7294),o(3905));const i={},a="Simplest auto-deployment using git hooks",l={unversionedId:"Git/Simplest auto-deployment using git hooks",id:"Git/Simplest auto-deployment using git hooks",title:"Simplest auto-deployment using git hooks",description:"Steps to set up a deployment from a local git repository to a server using git hooks.",source:"@site/docs/Git/Simplest auto-deployment using git hooks.md",sourceDirName:"Git",slug:"/Git/Simplest auto-deployment using git hooks",permalink:"/notebook/docs/Git/Simplest auto-deployment using git hooks",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Git/Simplest auto-deployment using git hooks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How-to-Create-Your-Own-Git-Server",permalink:"/notebook/docs/Git/How-to-Create-Your-Own-Git-Server"},next:{title:"git-changlog",permalink:"/notebook/docs/Git/git-changlog"}},s={},p=[{value:"Some example hook scripts include:",id:"some-example-hook-scripts-include",level:2},{value:"Steps:",id:"steps",level:2}],c={toc:p};function m(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"simplest-auto-deployment-using-git-hooks"},"Simplest auto-deployment using git hooks"),(0,n.kt)("p",null,"Steps to set up a deployment from a local git repository to a server using git hooks."),(0,n.kt)("p",null,"Git hooks are scripts that Git executes before or after events such as commit, push, and receive."),(0,n.kt)("p",null,"Git hooks are run locally."),(0,n.kt)("h2",{id:"some-example-hook-scripts-include"},"Some example hook scripts include:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pre-commit"),": Check the commit message for spelling errors."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pre-receive"),": Enforce project coding standards."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"post-commit"),": Email/SMS team members of a new commit."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"post-receive"),": Push the code to production.")),(0,n.kt)("h2",{id:"steps"},"Steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Have a local git repository")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a repository to deploy on the production server"),(0,n.kt)("p",{parentName:"li"},"$ ssh ",(0,n.kt)("a",{parentName:"p",href:"mailto:user@server.com"},"user@server.com"),"\n$ git init --bare ","~","/project.git")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Add the ",(0,n.kt)("inlineCode",{parentName:"p"},"post-receive")," hook script"))),(0,n.kt)("p",null,"This script is executed when the push from the local machine has been completed and moves the files into place."),(0,n.kt)("p",null,"It resides in ",(0,n.kt)("inlineCode",{parentName:"p"},"project.git/hooks/")," and is named ",(0,n.kt)("inlineCode",{parentName:"p"},"post-receive"),". "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nTARGET="/var/www/dev-lms.universalmedica.com"\nGIT_DIR="/home/git/lmsv3-universalmedica.git"\n\nBRANCH="test"\n\nwhile read oldrev newrev ref\ndo\n # only checking out the master (or whatever branch you would like to deploy)\n if [ "$ref" = "refs/heads/$BRANCH" ];\n then\n  echo "Ref $ref received. Deploying ${BRANCH} branch to production..."\n  git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH\n\n  cd $TARGET\n  php bin/console doctrine:schema:update --force\n  php bin/console cache:clear --no-warmup\n  php bin/console cache:warmup\n else\n  \n  # perform more tasks like migrate and run test, the output of these commands will be shown on the push screen\necho "Ref $ref received. Doing nothing: only the ${BRANCH} branch may be deployed on this server."\n fi\ndone\n')),(0,n.kt)("p",null,"Remember to make the script executable by adding the execute permission."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$ chmod +x post-receive\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Add a remote to production on the local repository")),(0,n.kt)("p",null,"Now we add the bare (production) repository to local repository as a remote, where ",(0,n.kt)("inlineCode",{parentName:"p"},"server")," is the name you want to give the remote."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$ cd ~/path/to/working-copy/ # local\n$ git remote add server demo@yourserver.com:project.git\n")),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Push to the production server"),(0,n.kt)("p",{parentName:"li"},"$ git push server master")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"(Optional) Add your SSH key to the server"),(0,n.kt)("p",{parentName:"li"},"$ ssh-keygen -t rsa #local\n$ cat ~/.ssh/id_rsa.pub | ssh user@hostname 'cat >> .ssh/authorized_keys' #local"))))}m.isMDXComponent=!0}}]);