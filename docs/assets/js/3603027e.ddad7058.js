"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[38373],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},y=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),y=r,g=p["".concat(l,".").concat(y)]||p[y]||m[y]||a;return n?i.createElement(g,o(o({ref:t},u),{},{components:n})):i.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}y.displayName="MDXCreateElement"},76900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const a={},o="Defining Services Dependencies Automatically (Autowiring)",s={unversionedId:"Symfony/Service/Defining-Services-Dependencies-Automatically-Autowiring",id:"Symfony/Service/Defining-Services-Dependencies-Automatically-Autowiring",title:"Defining Services Dependencies Automatically (Autowiring)",description:"https://symfony.com/doc/current/service_container/autowiring.html",source:"@site/docs/Symfony/Service/Defining-Services-Dependencies-Automatically-Autowiring.md",sourceDirName:"Symfony/Service",slug:"/Symfony/Service/Defining-Services-Dependencies-Automatically-Autowiring",permalink:"/notebook/docs/Symfony/Service/Defining-Services-Dependencies-Automatically-Autowiring",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Symfony/Service/Defining-Services-Dependencies-Automatically-Autowiring.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to Use the Serializer",permalink:"/notebook/docs/Symfony/Serialization/How to Use the Serializer"},next:{title:"How to merge two php Doctrine 2 ArrayCollection()",permalink:"/notebook/docs/Symfony/Snippets/How to merge two php Doctrine 2 ArrayCollection"}},l={},c=[{value:"Using Aliases to Enable Autowiring",id:"using-aliases-to-enable-autowiring",level:2},{value:"Working with Interfaces",id:"working-with-interfaces",level:2},{value:"Dealing with Multiple Implementations of the Same Type",id:"dealing-with-multiple-implementations-of-the-same-type",level:2},{value:"Autowiring other Methods (e.g. Setters)",id:"autowiring-other-methods-eg-setters",level:2},{value:"symfonycastshttps://symfonycasts.com/screencast/symfony4-fundamentals/slack-autowiring-alias",id:"symfonycastshttpssymfonycastscomscreencastsymfony4-fundamentalsslack-autowiring-alias",level:2},{value:"Public Versus Private Services",id:"public-versus-private-services",level:2},{value:"Fetching a Service by id",id:"fetching-a-service-by-id",level:2},{value:"custom aliases for autowiring",id:"custom-aliases-for-autowiring",level:2},{value:"setup special, global autowiring rules",id:"setup-special-global-autowiring-rules",level:2},{value:"controller autowiring",id:"controller-autowiring",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"defining-services-dependencies-automatically-autowiring"},"Defining Services Dependencies Automatically (Autowiring)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://symfony.com/doc/current/service_container/autowiring.html"},"https://symfony.com/doc/current/service_container/autowiring.html")),(0,r.kt)("p",null,"It reads the type-hints on your constructor (or other methods) and automatically passes the correct services to each method."),(0,r.kt)("p",null,"If you're using the default ",(0,r.kt)("em",{parentName:"p"},"services.yaml")," configuration, ",(0,r.kt)("em",{parentName:"p"},"all classes are automatically registered as services and configured to be autowired"),". This means you can use them immediately without any configuration."),(0,r.kt)("p",null,"If you load services automatically, each service's id is its class name."),(0,r.kt)("h2",{id:"using-aliases-to-enable-autowiring"},"Using Aliases to Enable Autowiring"),(0,r.kt)("h2",{id:"working-with-interfaces"},"Working with Interfaces"),(0,r.kt)("h2",{id:"dealing-with-multiple-implementations-of-the-same-type"},"Dealing with Multiple Implementations of the Same Type"),(0,r.kt)("h2",{id:"autowiring-other-methods-eg-setters"},"Autowiring other Methods (e.g. Setters)"),(0,r.kt)("p",null,"When autowiring is enabled for a service, you can also configure the container to call methods on your class when it's instantiated. For example, suppose you want to inject the ",(0,r.kt)("em",{parentName:"p"},"logger")," service, and decide to use setter-injection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"namespace App\\Util;\n\nclass Rot13Transformer\n{\n    private $logger;\n\n    /**\n     * @required\n     */\n    public function setLogger(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    public function transform($value)\n    {\n        $this->logger->info('Transforming '.$value);\n        // ...\n    }\n}\n")),(0,r.kt)("p",null,"Autowiring will automatically call any method with the ",(0,r.kt)("em",{parentName:"p"},"@required")," annotation above it, "),(0,r.kt)("h2",{id:"symfonycastshttpssymfonycastscomscreencastsymfony4-fundamentalsslack-autowiring-alias"},"symfonycasts","[https://symfonycasts.com/screencast/symfony4-fundamentals/slack-autowiring-alias]"),(0,r.kt)("h2",{id:"public-versus-private-services"},"Public Versus Private Services"),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"Symfony 3"),", ",(0,r.kt)("em",{parentName:"p"},"services were defined as public"),". This means that you could use a ",(0,r.kt)("em",{parentName:"p"},"$this->get()** shortcut method in your controller to fetch a service by its id. Or, if you had the "),"container object",(0,r.kt)("em",{parentName:"p"}," itself - yep, that's totally possible - you could say "),"$container->get()* to do the same thing."),(0,r.kt)("p",null,"But in ",(0,r.kt)("em",{parentName:"p"},"Symfony 4"),", ",(0,r.kt)("em",{parentName:"p"},"most services are private"),". What does that mean? Very simply, when a service is private, you ",(0,r.kt)("em",{parentName:"p"},"cannot use the $this->get()")," shortcut to fetch it."),(0,r.kt)("p",null,"more and more third-party bundles are also making their services private."),(0,r.kt)("p",null,"And because so many services are now private, instead of using ",(0,r.kt)("em",{parentName:"p"},"$this->get()"),', we need to fetch services via "',(0,r.kt)("em",{parentName:"p"},"dependency injection"),'"'),(0,r.kt)("h2",{id:"fetching-a-service-by-id"},"Fetching a Service by id"),(0,r.kt)("p",null,"how the heck can we fetch this service?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"php bin/console debug:container nexy_slack.client\n")),(0,r.kt)("p",null,"Apparently the class for this object is ",(0,r.kt)("em",{parentName:"p"},"Nexy\\Slack\\Client"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"debug:autowiring - Lists classes/interfaces you can use for autowiring"),(0,r.kt)("li",{parentName:"ul"},"debug:config - Dumps the current configuration for an extension"),(0,r.kt)("li",{parentName:"ul"},"debug:container - Displays current services for an application"),(0,r.kt)("li",{parentName:"ul"},"debug:event-dispatcher - Displays configured listeners for an application"),(0,r.kt)("li",{parentName:"ul"},"debug:form - Displays form type information"),(0,r.kt)("li",{parentName:"ul"},"debug:router - Displays current routes for an application"),(0,r.kt)("li",{parentName:"ul"},"debug:swiftmailer - Displays current mailers for an application"),(0,r.kt)("li",{parentName:"ul"},"debug:translation - Displays translation messages information"),(0,r.kt)("li",{parentName:"ul"},"debug:twig - Shows a list of twig functions, filters, globals and tests")),(0,r.kt)("h2",{id:"custom-aliases-for-autowiring"},"custom aliases for autowiring"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n    # custom aliases for autowiring\n    Nexy\\Slack\\Client: '@nexy_slack.client'\n")),(0,r.kt)("h2",{id:"setup-special-global-autowiring-rules"},"setup special, global autowiring rules"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n    # default configuration for services in *this* file\n    _defaults:\n        # setup special, global autowiring rules\n        bind:\n            Nexy\\Slack\\Client: '@nexy_slack.client'\n")),(0,r.kt)("h2",{id:"controller-autowiring"},"controller autowiring"))}p.isMDXComponent=!0}}]);