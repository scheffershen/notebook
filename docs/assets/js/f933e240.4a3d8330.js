"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4661],{3905:(e,o,n)=>{n.d(o,{Zo:()=>c,kt:()=>m});var t=n(7294);function a(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function i(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?i(Object(n),!0).forEach((function(o){a(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function l(e,o){if(null==e)return{};var n,t,a=function(e,o){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||(a[n]=e[n]);return a}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),g=function(e){var o=t.useContext(s),n=o;return e&&(n="function"==typeof e?e(o):r(r({},o),e)),n},c=function(e){var o=g(e.components);return t.createElement(s.Provider,{value:o},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},d=t.forwardRef((function(e,o){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=g(n),d=a,m=u["".concat(s,".").concat(d)]||u[d]||p[d]||i;return n?t.createElement(m,r(r({ref:o},c),{},{components:n})):t.createElement(m,r({ref:o},c))}));function m(e,o){var n=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in o)hasOwnProperty.call(o,s)&&(l[s]=o[s]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var g=2;g<i;g++)r[g]=n[g];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3761:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>g});var t=n(7462),a=(n(7294),n(3905));const i={},r="packagist",l={unversionedId:"Google API/Google Vision/packagist",id:"Google API/Google Vision/packagist",title:"packagist",description:"jordikroon/google-vision (2019-11-29)",source:"@site/docs/Google API/Google Vision/packagist.md",sourceDirName:"Google API/Google Vision",slug:"/Google API/Google Vision/packagist",permalink:"/notebook/docs/Google API/Google Vision/packagist",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Google API/Google Vision/packagist.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cloud-vision php",permalink:"/notebook/docs/Google API/Google Vision/cloud-vision php"},next:{title:"Google Cloud Natural Language API",permalink:"/notebook/docs/Google API/Google Cloud Natural Language API"}},s={},g=[{value:"jordikroon/google-vision (2019-11-29)",id:"jordikroongoogle-vision-2019-11-29",level:2},{value:"wapnen/google-cloud-vision-php (2019-02-26)",id:"wapnengoogle-cloud-vision-php-2019-02-26",level:2},{value:"headoo/google-vision-api-bundle (2017)",id:"headoogoogle-vision-api-bundle-2017",level:2},{value:"wikisource/google-cloud-vision-php (2017-09-18)",id:"wikisourcegoogle-cloud-vision-php-2017-09-18",level:2},{value:"thangman22/google-cloud-vision-php (2016-12-24)",id:"thangman22google-cloud-vision-php-2016-12-24",level:2}],c={toc:g};function u(e){let{components:o,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,n,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"packagist"},"packagist"),(0,a.kt)("h2",{id:"jordikroongoogle-vision-2019-11-29"},"jordikroon/google-vision (2019-11-29)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$vision = new \\Vision\\Vision(\n    $apiKey, \n    [\n        // See a list of all features in the table below\n        // Feature, Limit\n        new \\Vision\\Feature(\\Vision\\Feature::FACE_DETECTION, 100),\n    ]\n);\n\n$imagePath = $_FILES['file']['tmp_name'];\n$response = $vision->request(\n    // See a list of all image loaders in the table below\n    new \\Vision\\Request\\Image\\LocalImage($imagePath)\n);\n\n$faces = $response->getFaceAnnotations();\nforeach ($faces as $face) {\n    foreach ($face->getBoundingPoly()->getVertices() as $vertex) {\n        echo sprintf('Person at position X %f and Y %f', $vertex->getX(), $vertex->getY());\n    }\n}\n")),(0,a.kt)("h2",{id:"wapnengoogle-cloud-vision-php-2019-02-26"},"wapnen/google-cloud-vision-php (2019-02-26)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"include \"vendor/autoload.php\";\nuse GoogleCloudVision\\GoogleCloudVision;\nuse GoogleCloudVision\\Request\\AnnotateImageRequest;\nuse GoogleCloudVision\\Request\\Request;\n\n\n$annotateImageRequest1 = new AnnotateImageRequest();\n$annotateImageRequest1->setImageUri(\"https://cdn.pixabay.com/photo/2016/02/19/11/25/supreme-court-building-1209701_960_720.jpg\");\n$annotateImageRequest1->setFeature('IMAGE_PROPERTIES');\n$annotateImageRequest1->setFeature('LABEL_DETECTION');\n$annotateImageRequest1->setFeature('WEB_DETECTION');\n\n$gcvRequest = new GoogleCloudVision([$annotateImageRequest1], \"Your_api_key\");\n$response = $gcvRequest->annotate();\n\necho json_encode($response);\n")),(0,a.kt)("p",null,"The function ",(0,a.kt)("inlineCode",{parentName:"p"},"setImageUri()"),"; takes a Google Cloud Storage image location, or publicly-accessible image URL. Alternatively you can use setImage(); which takes a base64 encoded image string."),(0,a.kt)("p",null,"You can set as many features as are available to the annotateImageRequest by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"setFeature()"),"; function on the annotateImageRequest which takes any of the following enum parameters ; TYPE_UNSPECIFIED, FACE_DETECTION, LANDMARK_DETECTION, LOGO_DETECTION, LABEL_DETECTION, TEXT_DETECTION, DOCUMENT_TEXT_DETECTION, SAFE_SEARCH_DETECTION, IMAGE_PROPERTIES, CROP_HINTS, WEB_DETECTION."),(0,a.kt)("h2",{id:"headoogoogle-vision-api-bundle-2017"},"headoo/google-vision-api-bundle (2017)"),(0,a.kt)("p",null,"GoogleVisionApiBundle is a Symfony2/3 Bundle for use the API Google Vision simpl"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"headoo_google_vision_api:\n    api_key: '%apikey%'\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$google_vision = $this->container->get('headoo_google_vision_api.helper');\n$google_vision->vision($image, $type); // $type=TEXT_DETECTION\n")),(0,a.kt)("h2",{id:"wikisourcegoogle-cloud-vision-php-2017-09-18"},"wikisource/google-cloud-vision-php (2017-09-18)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'use GoogleCloudVisionPHP\\GoogleCloudVision;\n\n$gcv = new GoogleCloudVision();\n\n// Get your API key from the Google Cloud Platform site.\n$gcv->setKey("[Key from Google]");\n\n// An image can be set from either a filename or URL (the default), raw data, or a Google Cloud Storage item:\n$gcv->setImage("local/filesystem/file.png");\n$gcv->setImage("https://example.org/url/to/file.png");\n$gcv->setImage(file_get_contents(\'local/file.png\'), GoogleCloudVision::IMAGE_TYPE_RAW);\n$gcv->setImage("gs://bucket_name/object_name", GoogleCloudVision::IMAGE_TYPE_GCS);\n\n// Set which features you want to retrieve:\n$gcv->addFeatureUnspecified(1);\n$gcv->addFeatureFaceDetection(1);\n$gcv->addFeatureLandmarkDetection(1);\n$gcv->addFeatureLogoDetection(1);\n$gcv->addFeatureLabelDetection(1);\n$gcv->addFeatureTextDetection(1);\n$gcv->addFeatureDocumentTextDetection(1);\n$gcv->addFeatureSafeSeachDetection(1);\n$gcv->addFeatureImageProperty(1);\n\n// Optional. The API will try to guess the language if you don\'t set this.\n$gcv->setImageContext([\'languageHints\' => [\'th\']]);\n\n$response = $gcv->request();\n')),(0,a.kt)("h2",{id:"thangman22google-cloud-vision-php-2016-12-24"},"thangman22/google-cloud-vision-php (2016-12-24)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'use GoogleCloudVisionPHP\\GoogleCloudVision;\n\n$gcv = new GoogleCloudVision();\n\n// Follow instruction from Google Cloud Vision Document\n$gcv->setKey("[Key from Google]");\n\n$gcv->setImage("[File path]");\n\n// 1 is Max result\n$gcv->addFeature("LABEL_DETECTION", 1);\n\n$gcv->addFeatureUnspecified(1);\n$gcv->addFeatureFaceDetection(1);\n$gcv->addFeatureLandmarkDetection(1);\n$gcv->addFeatureLogoDetection(1);\n$gcv->addFeatureLabelDetection(1);\n$gcv->addFeatureOCR(1);\n$gcv->addFeatureSafeSeachDetection(1);\n$gcv->addFeatureImageProperty(1);\n\n//Optinal\n$gcv->setImageContext(array("languageHints"=>array("th")));\n\n$response = $gcv->request();\n')))}u.isMDXComponent=!0}}]);