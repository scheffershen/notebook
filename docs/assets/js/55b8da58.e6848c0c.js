"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[13608],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(n),d=a,m=h["".concat(o,".").concat(d)]||h[d]||p[d]||s;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[h]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const s={},i="Elasticsearch The definitive guide",l={unversionedId:"ElasticSearch/Guide/Elasticsearch The definitive guide",id:"ElasticSearch/Guide/Elasticsearch The definitive guide",title:"Elasticsearch The definitive guide",description:"Chapter 1 You know, for Search ...",source:"@site/docs/ElasticSearch/Guide/Elasticsearch The definitive guide.md",sourceDirName:"ElasticSearch/Guide",slug:"/ElasticSearch/Guide/Elasticsearch The definitive guide",permalink:"/notebook/docs/ElasticSearch/Guide/Elasticsearch The definitive guide",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/ElasticSearch/Guide/Elasticsearch The definitive guide.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Complete Guide to Elasticsearch 2.1 - 2015",permalink:"/notebook/docs/ElasticSearch/Guide/Complete Guide to Elasticsearch 2_1 - 2015"},next:{title:"Packtpub - Building a Search Server with Elasticsearch",permalink:"/notebook/docs/ElasticSearch/Guide/Packtpub - Building a Search Server with Elasticse"}},o={},c=[{value:"Chapter 1 You know, for Search ...",id:"chapter-1-you-know-for-search-",level:2},{value:"Scroll",id:"scroll",level:2}],u={toc:c};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"elasticsearch-the-definitive-guide"},"Elasticsearch The definitive guide"),(0,a.kt)("h2",{id:"chapter-1-you-know-for-search-"},"Chapter 1 You know, for Search ..."),(0,a.kt)("p",null,"RESTful API with JSON over HTTP"),(0,a.kt)("p",null,"A request to Elasticsearch consists of the same parts as any HTTP request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ curl -X<VERB> '<PROTOCOL>://<HOST>/<PATH>?<QUERY_STRING>' -d '<BODY>'\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"VERB - The appropriate HTTP method or verb: GET, POST, PUT, HEAD, or DELETE."),(0,a.kt)("li",{parentName:"ul"},"PROTOCOL - Either http or https (if you have an https proxy in front of Elasticsearch.)"),(0,a.kt)("li",{parentName:"ul"},"QUERY_STRING - Any optional query-string parameters"),(0,a.kt)("li",{parentName:"ul"},"BODY - A JSON-encoded request body")),(0,a.kt)("p",null,"to count the number of documents in the cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_count\n{\n  "query": {\n    "match_all": {}\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"        $hosts = [\n            'http://user:pwd@localhost:9200'\n        ];   \n\n        // elastic Search client\n        $client = \\Elasticsearch\\ClientBuilder::create()->setHosts($hosts)->build();\n\n        $searchParams = []; \n        $searchParams['index'] = 'inteldata_db';\n        $searchParams['type'] = 'post';\n\n        $searchParams['body']['query'] = array( \"match_all\" => array());\n\n        try {\n             $response = $client->count($searchParams);\n             //echo \"<pre>\";\n             //var_dump($response);\n        } catch (Exception $e) {\n             //echo 'Exception re\xe7ue : ',  $e->getMessage(), \"\\n\";\n        }\n")),(0,a.kt)("p",null,"In Elasticsearch, a document belongs to a type, and those types live inside an index.\nYou can draw some (rough) parallels to a traditional relational database:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Relational DB \u21d2 Databases \u21d2 Tables \u21d2 Rows \u21d2 Columns\nElasticsearch \u21d2 Indices \u21d2 Types \u21d2 Documents \u21d2 Fields\n")),(0,a.kt)("p",null,"An Elasticsearch cluster can contain multiple indices (databases), which in turn contain\nmultiple types (tables). These types hold multiple documents (rows), and each\ndocument has multiple fields (columns)."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Search with Query DSL")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n  "query": {\n    "match" : {\n        "title" : "innovation paris"\n    }\n  }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Full-Text Search")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n  "query": {\n    "match" : {\n        "title" : "innovation paris"\n    }\n  }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'        // elastic Search client\n        $client = \\Elasticsearch\\ClientBuilder::create()->build();\n\n        $searchParams = []; \n        $searchParams[\'index\'] = \'medflixs_\'.$_locale;\n        $searchParams[\'type\'] = \'video\';\n\n        // this is how you specify a query in ES\n        $searchParams[\'body\'][\'query\'][\'match\'][\'_all\'] = array( "query" => $keyword, "operator" => "and");\n        $searchParams[\'body\'][\'suggest\'][\'suggestions\'] = array( "text" => $keyword, "term" => array("size" => 1, "field" => "_all", "sort" => "score", "min_word_length" => 3));\n\n        //default sorting: _score descending (score  is a simple relevance metric)\n        if ($filtre == "date" ) {\n            //default sorting: _score descending (score  is a simple relevance metric)\n            $searchParams[\'body\'][\'sort\'] = array( "date" => array("order" => "desc"));\n        } else {\n            $searchParams[\'body\'][\'sort\'] = [\'_score\'];\n        }\n        $searchParams[\'size\'] = 8000;\n        $searchParams[\'from\'] = 0;\n\n        // the actual query. Results are stored in a PHP array\n        $retDoc = $client->search($searchParams);\n\n          // suggestion if no result\n        if ($retDoc["suggest"]["suggestions"][0]["options"]) {\n            $suggestions = $retDoc["suggest"]["suggestions"][0]["options"][0];\n        } else {\n            $suggestions = array();\n        }\n\n        $videos = $retDoc["hits"]["hits"]; // $em->getRepository("AdministrationBundle:KeywordVideo")->searchVideos($array_kw);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Phrase Search")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n  "query": {\n    "match_phrase" : {\n        "event.city" : "Paris"\n    }\n  }\n}\n\n$searchParams[\'body\'][\'query\'][\'match_phrase\'] = array( "event.city" => "Paris");\n')),(0,a.kt)("p",null,"To do this, we use a slight variation of the match query called the match_phrase\nquery:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n  "query": {\n    "match_phrase" : {\n        "title" : "innovation paris"\n    }\n  }\n}\n$searchParams[\'body\'][\'query\'][\'match_phrase\'] = array( "title" => "Innovation");\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"More-Complicated Searches")),(0,a.kt)("p",null,"Our query will change a little to accommodate a filter, which allows us to execute structured searches efficiently:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n  "query": {\n    "filtered" : {\n        "filter" : {\n            "range" : {\n                "date" : { "gt" : 2015 }\n             }\n        },  \n        "query" : {\n          "match" : {\n              "title" : "innovation"\n          }\n        }\n    }\n  }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Analytics")),(0,a.kt)("p",null,"Elasticsearch has functionality called aggregations, which\nallow you to generate sophisticated analytics over your data. It is similar to GROUP BY\nin SQL,"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Combining Multiple Clauses")),(0,a.kt)("p",null,"For instance, a bool clause allows you to combine other clauses that either must match, must_not match, or should match if possible:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n  "query": {\n    "bool": {\n        "must": { "match": { "title": "innovation" }},\n        "must_not": { "match": { "event.city": "paris" }},\n        "should": { "match": { "title": "innovation day" }}\n    }\n  }  \n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"terms Filter")),(0,a.kt)("p",null,"The terms filter is the same as the term filter, but allows you to specify multiple values to match."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "terms": {\n            "speaker": ["benjamin", "yi"]\n        }\n    }\n}\n\nGET /medflixs_en/video/_search\n{\n    "query": {\n        "multi_match": {\n            "query": "innovation",\n            "fields": [ "title", "event.title" ]\n        }\n    }\n} \n')),(0,a.kt)("h2",{id:"scroll"},"Scroll"),(0,a.kt)("p",null,"While a search request returns a single \u201cpage\u201d of results, the scroll API can be used to retrieve large numbers of results."),(0,a.kt)("p",null,"In order to use scrolling, the initial search request should specify the scroll parameter in the query string, which tells Elasticsearch how long it should keep the \u201csearch context\u201d alive."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'POST /twitter/tweet/_search?scroll=1m\n{\n    "size": 100,\n    "query": {\n        "match" : {\n            "title" : "elasticsearch"\n        }\n    }\n}\n')),(0,a.kt)("p",null,"The result from the above request includes a _scroll_id, which should be passed to the scroll API in order to retrieve the next batch of results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'POST  /_search/scroll \n{\n    "scroll" : "1m", \n    "scroll_id" : "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==" \n}\n')))}h.isMDXComponent=!0}}]);