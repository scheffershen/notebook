"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[37322],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),c=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),h=n,m=u["".concat(o,".").concat(h)]||u[h]||d[h]||l;return a?r.createElement(m,i(i({ref:t},p),{},{components:a})):r.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<l;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},17529:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const l={},i="elasticsearch client php-api 2.0",s={unversionedId:"ElasticSearch/Guide/elasticsearch client php-api 2",id:"ElasticSearch/Guide/elasticsearch client php-api 2",title:"elasticsearch client php-api 2.0",description:"https://www.elastic.co/guide/en/elasticsearch/client/php-api/2.0/quickstart.html#indexadocument",source:"@site/docs/ElasticSearch/Guide/elasticsearch client php-api 2.md",sourceDirName:"ElasticSearch/Guide",slug:"/ElasticSearch/Guide/elasticsearch client php-api 2",permalink:"/notebook/docs/ElasticSearch/Guide/elasticsearch client php-api 2",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/ElasticSearch/Guide/elasticsearch client php-api 2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Search APIs Suggesters",permalink:"/notebook/docs/ElasticSearch/Guide/Search APIs - Suggesters"},next:{title:"How Can the ELK Stack Be Used to Monitor PHP Apps?",permalink:"/notebook/docs/ElasticSearch/How Can the ELK Stack Be Used to Monitor PHP Apps"}},o={},c=[{value:"Installation",id:"installation",level:2},{value:"Index a document",id:"index-a-document",level:2},{value:"Making a Query",id:"making-a-query",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"elasticsearch-client-php-api-20"},"elasticsearch client php-api 2.0"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/client/php-api/2.0/_quickstart.html#_index_a_document"},"https://www.elastic.co/guide/en/elasticsearch/client/php-api/2.0/_quickstart.html#_index_a_document")),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("p",null,"Include elasticsearch-php in your composer.json file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-composer.json"},'    {\n        "require": {\n            "elasticsearch/elasticsearch": "~2.0"\n        }\n    }\n')),(0,n.kt)("p",null,"Install the client with composer:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"curl -s http://getcomposer.org/installer | php\nphp composer.phar install --no-dev\n")),(0,n.kt)("p",null,"Include the autoloader in your main project (if you haven\u2019t already), and instantiate a new client :"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    require 'vendor/autoload.php';\n\n    $client = \\Elasticsearch\\ClientBuilder::create()->build();\n\n")),(0,n.kt)("h2",{id:"index-a-document"},"Index a document"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    require 'vendor/autoload.php';\n\n    $client = \\Elasticsearch\\ClientBuilder::create()->build();\n\n    $params = [\n        'index' => 'my_index',\n        'type' => 'my_type',\n        'id' => 'my_id',\n        'body' => ['testField' => 'abc']\n    ];\n\n    $response = $client->index($params);\n    print_r($response);\n    \n")),(0,n.kt)("h2",{id:"making-a-query"},"Making a Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    $searchParams = []; \n    $searchParams['index'] = 'my_first_index';\n    $searchParams['type'] = 'my_first_type';\n\n    // this is how you specify a query in ES\n    $searchParams['body']['query']['match']['_all'] = 'my_query';\n    \n    //default sorting: _score descending (score  is a simple relevance metric)\n    $searchParams['body']['sort'] = ['_score'];\n    \n    // the actual query. Results are stored in a PHP array\n    $retDoc = $client->search($searchParams);\n\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'   GET /my_first_index/my_first_type/_search\n    {\n        "query": {\n            "match": {\n               "_all": \'my_query\'\n            }\n        }\n    }\n\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Search with Specific Fields")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    $searchParams = []; \n    $searchParams['index'] = 'my_first_index';\n    $searchParams['type'] = 'my_first_type';\n\n    // this is how you specify a query in ES\n    $searchParams['body']['query']['match']['age'] = 15;\n    \n    // the actual query. Results are stored in a PHP array\n    $retDoc = $client->search($searchParams);\n\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "match": {\n            "age": 15\n        }\n    }\n}\n')),(0,n.kt)("p",null,"Let\u2019s break the results down:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"took \u2013 number of milliseconds it took for the request to finish."),(0,n.kt)("li",{parentName:"ul"},"timed_out \u2013 returns true if the request timed out."),(0,n.kt)("li",{parentName:"ul"},"_shards \u2013 by default, Elasticsearch distributes the data into 5 shards. If you get 5 as the value for total and successful then every shard is currently healthy. You can find a more detailed explanation in this Stackoverflow thread."),(0,n.kt)("li",{parentName:"ul"},"hits contains the results.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"use bool queries")),(0,n.kt)("p",null,"To do that, we specify bool as an item for the query. Then we can traverse to the field we want by using . starting from the first-level field down to the field we want to use as a query."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$params['body']['query']['bool']['must'][]['match']['pokemon.psyduck.type'] = 'water';\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "bool": {\n            "must":[\n                { "match": {"title": "innovation"}}\n            ]           \n        }\n    }\n}\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Searching with Arrays")),(0,n.kt)("p",null,"In the example below we\u2019re selecting documents which have an age that is equal to 10 and 15."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$params['body']['query']['bool']['must']['terms']['age'] = array(10, 15);\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Filtered Search")),(0,n.kt)("p",null,"In the example below, we\u2019re using the age as the field. We\u2019re selecting documents which have ages greater than or equal to (gte) 11 but less than or equal (lte) to 20."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$params['body']['query']['filtered']['filter']['range']['age']['gte'] = 11;\n$params['body']['query']['filtered']['filter']['range']['age']['lte'] = 20;\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"OR and AND")),(0,n.kt)("p",null,"In the example below we\u2019re using the and filter to select documents which have an age of 10 and a badge count of 8. Only the documents which matched this criteria are returned."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$params['body']['query']['filtered']['filter']['and'][]['term']['age'] = 10;\n$params['body']['query']['filtered']['filter']['and'][]['term']['badges'] = 8;\n")),(0,n.kt)("p",null,"If you want to select either of those then you can use or instead."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$params['body']['query']['filtered']['filter']['or'][]['term']['age'] = 10;\n$params['body']['query']['filtered']['filter']['or'][]['term']['badges'] = 8;\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Limiting Results")),(0,n.kt)("p",null,"Results can be limited to a specific number by specifying the size field. Here\u2019s an example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$params['body']['query']['filtered']['filter']['and'][]['term']['age'] = 10;\n$params['body']['query']['filtered']['filter']['and'][]['term']['badges'] = 8;\n$params['size'] = 1;\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Pagination")),(0,n.kt)("p",null,"In Elasticsearch we have size and from. from allows us to specify the index of the first result in the resultset. Documents are zero-indexed. So for 10 results per page, if we have a size of 10, we add 10 to the from value every time the user navigates to the next page."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"$params['size'] = 10;\n$params['from'] = 10; // <-- will return second page\n")))}u.isMDXComponent=!0}}]);