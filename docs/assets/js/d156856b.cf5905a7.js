"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1149],{3905:(e,n,t)=>{t.d(n,{Zo:()=>h,kt:()=>p});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},h=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,p=m["".concat(o,".").concat(d)]||m[d]||u[d]||r;return t?a.createElement(p,s(s({ref:n},h),{},{components:t})):a.createElement(p,s({ref:n},h))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[m]="string"==typeof e?e:i,s[1]=l;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={},s="Difference between sh and bash",l={unversionedId:"BashScript/Difference between sh and bash",id:"BashScript/Difference between sh and bash",title:"Difference between sh and bash",description:"https://www.geeksforgeeks.org/difference-between-sh-and-bash/",source:"@site/docs/BashScript/Difference between sh and bash.md",sourceDirName:"BashScript",slug:"/BashScript/Difference between sh and bash",permalink:"/notebook/docs/BashScript/Difference between sh and bash",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/BashScript/Difference between sh and bash.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BashScript",permalink:"/notebook/docs/category/bashscript"},next:{title:"Lynda - Linux Bash Shell and Scripts",permalink:"/notebook/docs/BashScript/Lynda - Linux Bash Shell and Scripts"}},o={},c=[{value:"Bash:",id:"bash",level:2},{value:"Shell:",id:"shell",level:2},{value:"30_bash_script_examples",id:"30_bash_script_examples",level:2},{value:"Create and Execute First BASH Program:",id:"create-and-execute-first-bash-program",level:2},{value:"Use of echo command:",id:"use-of-echo-command",level:2},{value:"Use of comment:",id:"use-of-comment",level:2},{value:"Use of Multi-line comment:",id:"use-of-multi-line-comment",level:2},{value:"Using While Loop:",id:"using-while-loop",level:2},{value:"Using For Loop:",id:"using-for-loop",level:2},{value:"Get User Input:",id:"get-user-input",level:2},{value:"Using if statement:",id:"using-if-statement",level:2},{value:"Using if statement with AND logic:",id:"using-if-statement-with-and-logic",level:2},{value:"Using if statement with OR logic:",id:"using-if-statement-with-or-logic",level:2},{value:"Using else if statement:",id:"using-else-if-statement",level:2},{value:"Using Case Statement:",id:"using-case-statement",level:2},{value:"Get Arguments from Command Line:",id:"get-arguments-from-command-line",level:2},{value:"Get arguments from command line with names:",id:"get-arguments-from-command-line-with-names",level:2},{value:"Combine String variables:",id:"combine-string-variables",level:2},{value:"Get substring of String:",id:"get-substring-of-string",level:2},{value:"Add Two Numbers:",id:"add-two-numbers",level:2},{value:"Create Function:",id:"create-function",level:2},{value:"Create function with Parameters:",id:"create-function-with-parameters",level:2},{value:"Pass Return Value from Function:",id:"pass-return-value-from-function",level:2},{value:"Make Directory:",id:"make-directory",level:2},{value:"Make directory by checking existence:",id:"make-directory-by-checking-existence",level:2},{value:"Read a File:",id:"read-a-file",level:2},{value:"Delete a File:",id:"delete-a-file",level:2},{value:"Append to File:",id:"append-to-file",level:2},{value:"Test if File Exist:",id:"test-if-file-exist",level:2},{value:"Send Email:",id:"send-email",level:2},{value:"Get Parse Current Date:",id:"get-parse-current-date",level:2},{value:"Wait Command:",id:"wait-command",level:2},{value:"Sleep Command:",id:"sleep-command",level:2}],h={toc:c};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"difference-between-sh-and-bash"},"Difference between sh and bash"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/difference-between-sh-and-bash/"},"https://www.geeksforgeeks.org/difference-between-sh-and-bash/")),(0,i.kt)("p",null,"Last Updated : 21 Feb, 2022"),(0,i.kt)("p",null,"bash and sh are two different shells of the Unix operating system."),(0,i.kt)("h2",{id:"bash"},"Bash:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"bash is sh, but with more features and better syntax"),(0,i.kt)("li",{parentName:"ul"},"Bash is \u201cBourne Again SHell\u201d, and is an improvement of the sh (original Bourne shell). "),(0,i.kt)("li",{parentName:"ul"},"whereas Bash scripting is scripting specifically for Bash"),(0,i.kt)("li",{parentName:"ul"},"bash is a superset of sh"),(0,i.kt)("li",{parentName:"ul"},"bash is a programming language. Here think like python, we can start python in interactive mode and it behaves like a shell but we can also run python program on any IDE."),(0,i.kt)("li",{parentName:"ul"},"bash supports features of sh and provides more functionality than sh."),(0,i.kt)("li",{parentName:"ul"},"bash is not a POSIX compliant shell."),(0,i.kt)("li",{parentName:"ul"},"It is a dialect of the POSIX shell language. "),(0,i.kt)("li",{parentName:"ul"},"Bash can run in a text window and allows the user to interpret commands to do various tasks."),(0,i.kt)("li",{parentName:"ul"},"It has the best and most useful features of the Korn and C shells, such as directory manipulation, job control, aliases, and many others."),(0,i.kt)("li",{parentName:"ul"},"bash is more functional than sh in terms of programming and interactive use.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash  \n\nmyString="GeeksforGeeks"\necho "myString: $myString"\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ bash -f main.sh\n")),(0,i.kt)("h2",{id:"shell"},"Shell:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Shell scripting is scripting in any shell, "),(0,i.kt)("li",{parentName:"ul"},"sh is a shell command-line interpreter of Unix/Unix-like operating systems."),(0,i.kt)("li",{parentName:"ul"},"sh provides some built-in commands."),(0,i.kt)("li",{parentName:"ul"},"Shell is a command-line interface to run commands and shell scripts."),(0,i.kt)("li",{parentName:"ul"},"Shells come in a variety of flavors, much as operating systems come in a variety of flavors."),(0,i.kt)("li",{parentName:"ul"},"Shell is an interface between the user and the operating system, which helps the user to interact with the device."),(0,i.kt)("li",{parentName:"ul"},"sh is also called Bourne Shell. "),(0,i.kt)("li",{parentName:"ul"},"sh is a command programming language described by POSIX standard. It is for UNIX or UNIX-like operating systems."),(0,i.kt)("li",{parentName:"ul"},"On most operating systems, sh is implemented by programs like dash, kash, and original Bourne Shell. sh is a Predecessor of bash. /bin/sh is an actual link to main implementations. It is a symlink in most POSIX systems."),(0,i.kt)("li",{parentName:"ul"},"sh is not a programming language itself. It is just a specification."),(0,i.kt)("li",{parentName:"ul"},"sh is a detailed description of the syntax and semantics of the language"),(0,i.kt)("li",{parentName:"ul"},"It doesn\u2019t include an implementation. sh is written as a replacement for earlier UNIX shells."),(0,i.kt)("li",{parentName:"ul"},"It\u2019s most of the syntax is the same as the syntax of the ALGOL68 programming language."),(0,i.kt)("li",{parentName:"ul"},"We should use sh if we want our language to be compatible with multiple systems. "),(0,i.kt)("li",{parentName:"ul"},"The sh script will most like run on bash also without modifications as bash is backward compatible with sh."),(0,i.kt)("li",{parentName:"ul"},"sh is the most portable scripting language that works on most POSIX/Unix/Linux systems. "),(0,i.kt)("li",{parentName:"ul"},"One advantage of sh is that it is guaranteed to exist on everything that purports to Unix system. ")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/sh  \n\nmyString="GeeksforGeeks"\necho "myString: $myString"\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ bash -f main.sh\n")),(0,i.kt)("h2",{id:"30_bash_script_examples"},"30_bash_script_examples"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://linuxhint.com/30_bash_script_examples/"},"https://linuxhint.com/30_bash_script_examples/")),(0,i.kt)("h2",{id:"create-and-execute-first-bash-program"},"Create and Execute First BASH Program:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\necho "Hello World"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$  bash First.sh\n")),(0,i.kt)("h2",{id:"use-of-echo-command"},"Use of echo command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\necho "Printing text with newline"\necho -n "Printing text without newline"\necho -e "\\nRemoving \\t backslash \\t characters\\n"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ bash echo_example.sh\n")),(0,i.kt)("p",null,"\u2018-n\u2019 option is used to print any text without new line\n\u2018-e\u2019 option is used to remove backslash characters from the output. "),(0,i.kt)("h2",{id:"use-of-comment"},"Use of comment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#!/bin/bash\n\n# Add two numeric value\n((sum=25+35))\n\n#Print the result\necho $sum\n")),(0,i.kt)("h2",{id:"use-of-multi-line-comment"},"Use of Multi-line comment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#!/bin/bash\n: '\nThe following script calculates\nthe square value of the number, 5.\n'\n((area=5*5))\necho $area\n")),(0,i.kt)("h2",{id:"using-while-loop"},"Using While Loop:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#!/bin/bash ## == !/bin/sh\nvalid=true\ncount=1\nwhile [ $valid ]; do\n    echo $count\n    \n    if [ $count -eq 5 ];\n        then\n        break\n    fi\n    \n    ((count++))\ndone\n")),(0,i.kt)("h2",{id:"using-for-loop"},"Using For Loop:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\nfor (( counter=10; counter>0; counter-- )) do ## == for (( counter=10; counter>0; counter-- )); do \n    echo -n "$counter "\ndone\n\nprintf "\\n"\n')),(0,i.kt)("p",null,"\u2018-n\u2019 option is used to print any text without new line"),(0,i.kt)("h2",{id:"get-user-input"},"Get User Input:"),(0,i.kt)("p",null,"\u2018read\u2019 command is used to take input from user in bash."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\necho "Enter Your Name"\nread name\necho "Welcome $name to LinuxHint"\n')),(0,i.kt)("h2",{id:"using-if-statement"},"Using if statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\nn=10\n\nif [ $n -lt 10 ]; then ## == if [[ $n -lt 10 ]]; then \n    echo "It is a one digit number"\nelse\n    echo "It is a two digit number"\nfi\n')),(0,i.kt)("h2",{id:"using-if-statement-with-and-logic"},"Using if statement with AND logic:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter username"\nread username\necho "Enter password"\nread password\n\nif [[ ( $username == "admin" && $password == "secret" ) ]]; then\n    echo "valid user"\nelse\n    echo "invalid user"\nfi\n')),(0,i.kt)("h2",{id:"using-if-statement-with-or-logic"},"Using if statement with OR logic:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter any number"\nread n\n\nif [[ ( $n -eq 15 || $n  -eq 45 ) ]]; then\n    echo "You won the game"\nelse\n    echo "You lost the game"\nfi\n')),(0,i.kt)("h2",{id:"using-else-if-statement"},"Using else if statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter your lucky number"\nread n\n\nif [ $n -eq 101 ]; then\n    echo "You got 1st prize"\nelif [ $n -eq 510 ]; then\n    echo "You got 2nd prize"\nelif [ $n -eq 999 ]; then\n    echo "You got 3rd prize"\nelse\n    echo "Sorry, try for the next time"\nfi\n')),(0,i.kt)("h2",{id:"using-case-statement"},"Using Case Statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter your lucky number"\nread n\n\ncase $n in\n    101)\n        echo echo "You got 1st prize" ;;\n    510)\n        echo "You got 2nd prize" ;;\n    999)\n        echo "You got 3rd prize" ;;\n    *)\n        echo "Sorry, try for the next time" ;;\nesac\n')),(0,i.kt)("h2",{id:"get-arguments-from-command-line"},"Get Arguments from Command Line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Total arguments : $#"\necho "1st Argument = $1"\necho "2nd argument = $2"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ bash example.sh Linux Hint\n")),(0,i.kt)("h2",{id:"get-arguments-from-command-line-with-names"},"Get arguments from command line with names:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nfor arg in "$@"; do\n    index=$(echo $arg | cut -f1 -d=) ##  index = $(echo $arg | cut -f1 -d=) ne marche pas\n    val=$(echo $arg | cut -f2 -d=)\n\n    case $index in\n        X) x=$val;;\n        Y) y=$val;;\n        *)\n    esac\ndone\n\n((result=x+y))\n\necho "X+Y=$result"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ bash command_line_names X=45 Y=30\n")),(0,i.kt)("h2",{id:"combine-string-variables"},"Combine String variables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nstring1="Linux" ## not string1 = "Linux"\nstring2="Hint"\n\necho "$string1$string2"\n\nstring3=$string1+$string2\nstring3+=" is a good tutorial blog site"\necho $string3\n')),(0,i.kt)("h2",{id:"get-substring-of-string"},"Get substring of String:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nStr="Learn Linux from LinuxHint"\nsubStr=${Str:6:5}\necho $subStr\n')),(0,i.kt)("h2",{id:"add-two-numbers"},"Add Two Numbers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter first number"\nread x\necho "Enter second number"\nread y\n(( sum=x+y ))\necho "The result of addition=$sum"\n')),(0,i.kt)("h2",{id:"create-function"},"Create Function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#!/bin/bash\n\nfunction F1() {\n    echo 'I like bash programming'\n}\n\nF1\n")),(0,i.kt)("h2",{id:"create-function-with-parameters"},"Create function with Parameters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nRectangle_Area() {\n    area=$(($1 * $2)) ## not work area= $(($1 * $2)) or area =$(($1 * $2))\n    echo "Area is : $area"\n}\n\nRectangle_Area 10 20\n')),(0,i.kt)("h2",{id:"pass-return-value-from-function"},"Pass Return Value from Function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nfunction greeting() {\n    str="Hello, $name"\n    echo $str\n}\n\necho "Enter your name"\nread name\n\nval=$(greeting)\necho "Return value of the function is $val"\n')),(0,i.kt)("h2",{id:"make-directory"},"Make Directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter directory name"\nread newdir\n`mkdir $newdir`\n')),(0,i.kt)("h2",{id:"make-directory-by-checking-existence"},"Make directory by checking existence:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter directory name"\nread ndir\nif [ -d "$ndir" ]; then\n    echo "Directory exist"\nelse\n    mkdir $ndir ## same as `mkdir $ndir`\n    echo "Directory created"\nfi\n')),(0,i.kt)("h2",{id:"read-a-file"},"Read a File:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#!/bin/bash\n\nfile='ecs.yaml'\nwhile read line; do\n    echo $line\ndone < $file\n")),(0,i.kt)("h2",{id:"delete-a-file"},"Delete a File:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Enter filename to remove"\nread fn\nrm -i $fn ## same as `rm -i $fn`\n')),(0,i.kt)("h2",{id:"append-to-file"},"Append to File:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Before appending the file"\ncat book.txt\n\necho "Learning Laravel 5">> book.txt\necho "After appending the file"\ncat book.txt\n')),(0,i.kt)("h2",{id:"test-if-file-exist"},"Test if File Exist:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nfilename=$1\n\nif [ -f "$filename" ]; then\n    echo "File exists"\nelse\n    echo "File does not exist"\nfi\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ bash file_exist.sh book.txt\n")),(0,i.kt)("h2",{id:"send-email"},"Send Email:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nRecipient="admin@example.com"\nSubject="Greeting"\nMessage="Welcome to our site"\n\n`mail -s $Subject $Recipient <<< $Message`\n')),(0,i.kt)("h2",{id:"get-parse-current-date"},"Get Parse Current Date:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\nYear=`date +%Y`\nMonth=`date +%m`\nDay=`date +%d`\nHour=`date +%H`\nMinute=`date +%M`\nSecond=`date +%S`\n\necho `date`\necho "Current Date is: $Day-$Month-$Year"\necho "Current Time is: $Hour:$Minute:$Second"\n')),(0,i.kt)("h2",{id:"wait-command"},"Wait Command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n\necho "Wait command" &\nprocess_id=$!\nwait $process_id\necho "Exited with status $?"\n')),(0,i.kt)("p",null,"wait  is a built-in command of Linux that waits for completing any running process. "),(0,i.kt)("p",null,"wait command is used with a particular process id or job id. If no process id or job id is given with wait command then it will wait for all current child processes to complete and returns exit status. "),(0,i.kt)("h2",{id:"sleep-command"},"Sleep Command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"#!/bin/bash\n\necho \u201cWait for 5 seconds\u201d\nsleep 5\necho \u201cCompleted\u201d\n")))}m.isMDXComponent=!0}}]);