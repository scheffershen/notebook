"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[11217],{3905:(e,n,r)=>{r.d(n,{Zo:()=>m,kt:()=>d});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(r),y=o,d=c["".concat(l,".").concat(y)]||c[y]||u[y]||a;return r?t.createElement(d,i(i({ref:n},m),{},{components:r})):t.createElement(d,i({ref:n},m))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},46297:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var t=r(87462),o=(r(67294),r(3905));const a={},i="How to Use the Serializer",s={unversionedId:"Symfony/Serialization/How to Use the Serializer",id:"Symfony/Serialization/How to Use the Serializer",title:"How to Use the Serializer",description:"Symfony provides a serializer to serialize/deserialize to and from objects",source:"@site/docs/Symfony/Serialization/How to Use the Serializer.md",sourceDirName:"Symfony/Serialization",slug:"/Symfony/Serialization/How to Use the Serializer",permalink:"/notebook/docs/Symfony/Serialization/How to Use the Serializer",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Symfony/Serialization/How to Use the Serializer.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Optimiser l'application symfony",permalink:"/notebook/docs/Symfony/Performanace/Optimiser l-application symfony"},next:{title:"Defining Services Dependencies Automatically (Autowiring)",permalink:"/notebook/docs/Symfony/Service/Defining-Services-Dependencies-Automatically-Autowiring"}},l={},p=[{value:"Serializing an Object",id:"serializing-an-object",level:2},{value:"Deserializing an Object",id:"deserializing-an-object",level:2},{value:"Attributes Groups",id:"attributes-groups",level:2},{value:"Converting Property Names when Serializing and Deserializing",id:"converting-property-names-when-serializing-and-deserializing",level:2}],m={toc:p};function c(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-use-the-serializer"},"How to Use the Serializer"),(0,o.kt)("p",null,"Symfony provides a serializer to serialize/deserialize to and from objects"),(0,o.kt)("p",null,"use Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\CacheableSupportsMethodInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;"),(0,o.kt)("p",null,"ObjectNormalizer: to handle typical data objects"),(0,o.kt)("p",null,"Object <--deserialize-- Format(JSON, XML,CSV)\nObject ---serialize---\x3e Format(JSON, XML,CSV)\nObject <--denormalize-- Array <--decode-- Format(JSON, XML,CSV)\nObject ---normalize---\x3e Array --encode--\x3e Format(JSON, XML,CSV) "),(0,o.kt)("p",null,"an array is used as an intermediary between objects and serialized contents"),(0,o.kt)("h2",{id:"serializing-an-object"},"Serializing an Object"),(0,o.kt)("p",null,"if you want to serialize this object into JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'use App\\Model\\Person;\n\n$person = new Person();\n$person->setName(\'foo\');\n$person->setAge(99);\n$person->setSportsperson(false);\n\n$jsonContent = $serializer->serialize($person, \'json\');\n\n// $jsonContent contains {"name":"foo","age":99,"sportsperson":false,"createdAt":null}\n\necho $jsonContent; // or return it in a Response\n')),(0,o.kt)("h2",{id:"deserializing-an-object"},"Deserializing an Object"),(0,o.kt)("p",null,"the Person class would be encoded in XML format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use App\\Model\\Person;\n\n$data = <<<EOF\n<person>\n    <name>foo</name>\n    <age>99</age>\n    <sportsperson>false</sportsperson>\n</person>\nEOF;\n\n$person = $serializer->deserialize($data, Person::class, 'xml');\n")),(0,o.kt)("h2",{id:"attributes-groups"},"Attributes Groups"),(0,o.kt)("p",null,"you want to serialize different sets of attributes from your entities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'namespace Acme;\n\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\nclass MyObj\n{\n    /**\n     * @Groups({"group1", "group2"})\n     */\n    public $foo;\n\n    /**\n     * @Groups("group3")\n     */\n    public function getBar() // is* methods are also supported\n    {\n        return $this->bar;\n    }\n\n    // ...\n}\n')),(0,o.kt)("p",null,"You are now able to serialize only attributes in the groups you want:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\n$obj = new MyObj();\n$obj->foo = 'foo';\n$obj->setBar('bar');\n\n$normalizer = new ObjectNormalizer($classMetadataFactory);\n$serializer = new Serializer([$normalizer]);\n\n$data = $serializer->normalize($obj, null, ['groups' => 'group1']);\n// $data = ['foo' => 'foo'];\n\n$obj2 = $serializer->denormalize(\n    ['foo' => 'foo', 'bar' => 'bar'],\n    'MyObj',\n    null,\n    ['groups' => ['group1', 'group3']]\n);\n// $obj2 = MyObj(foo: 'foo', bar: 'bar')\n")),(0,o.kt)("h2",{id:"converting-property-names-when-serializing-and-deserializing"},"Converting Property Names when Serializing and Deserializing"),(0,o.kt)("p",null,"Sometimes serialized attributes must be named differently than properties or getter/setter methods of PHP classes."),(0,o.kt)("p",null,"The Serializer component provides a handy way to translate or map PHP field names to serialized names: The Name Converter System."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'class Company\n{\n    public $name;\n    public $address;\n}\n\n// {"org_name": "Acme Inc.", "org_address": "123 Main Street, Big City"}\n\nuse Symfony\\Component\\Serializer\\NameConverter\\NameConverterInterface;\n\nclass OrgPrefixNameConverter implements NameConverterInterface\n{\n    public function normalize($propertyName)\n    {\n        return \'org_\'.$propertyName;\n    }\n\n    public function denormalize($propertyName)\n    {\n        // removes \'org_\' prefix\n        return \'org_\' === substr($propertyName, 0, 4) ? substr($propertyName, 4) : $propertyName;\n    }\n}\n\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\n$nameConverter = new OrgPrefixNameConverter();\n$normalizer = new ObjectNormalizer(null, $nameConverter);\n\n$serializer = new Serializer([$normalizer], [new JsonEncoder()]);\n\n$company = new Company();\n$company->name = \'Acme Inc.\';\n$company->address = \'123 Main Street, Big City\';\n\n$json = $serializer->serialize($company, \'json\');\n// {"org_name": "Acme Inc.", "org_address": "123 Main Street, Big City"}\n$companyCopy = $serializer->deserialize($json, Company::class, \'json\');\n// Same data as $company\n')))}c.isMDXComponent=!0}}]);