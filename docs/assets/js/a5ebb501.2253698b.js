"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[115],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return n?r.createElement(k,o(o({ref:t},u),{},{components:n})):r.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={slug:"guide-developpeur",title:"Guide du d\xe9veloppeur",authors:["yshen"],tags:["solid","code quality","code analyser","unit testing","workflow","git"]},o=void 0,i={permalink:"/notebook/blog/guide-developpeur",editUrl:"https://github.com/scheffershen/notebook/tree/main/blog/2022-11-01-guide-developpeur/index.md",source:"@site/blog/2022-11-01-guide-developpeur/index.md",title:"Guide du d\xe9veloppeur",description:"- SOLID",date:"2022-11-01T00:00:00.000Z",formattedDate:"November 1, 2022",tags:[{label:"solid",permalink:"/notebook/blog/tags/solid"},{label:"code quality",permalink:"/notebook/blog/tags/code-quality"},{label:"code analyser",permalink:"/notebook/blog/tags/code-analyser"},{label:"unit testing",permalink:"/notebook/blog/tags/unit-testing"},{label:"workflow",permalink:"/notebook/blog/tags/workflow"},{label:"git",permalink:"/notebook/blog/tags/git"}],readingTime:4.515,hasTruncateMarker:!1,authors:[{name:"Yi Shen",title:"Web Developer",url:"https://github.com/scheffershen",imageURL:"https://github.com/scheffershen.png",key:"yshen"}],frontMatter:{slug:"guide-developpeur",title:"Guide du d\xe9veloppeur",authors:["yshen"],tags:["solid","code quality","code analyser","unit testing","workflow","git"]},nextItem:{title:"Comment optimiser l'application symfony",permalink:"/notebook/blog/comment-optimiser-l-application-symfony"}},p={authorsImageUrls:[void 0]},s=[{value:"SOLID",id:"solid",level:3},{value:"Code Quality",id:"code-quality",level:3},{value:"Code Analyser",id:"code-analyser",level:3},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Workflow",id:"workflow",level:3},{value:"Commands utiles",id:"commands-utiles",level:3},{value:"Branches",id:"branches",level:3}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#solid"},"SOLID")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#code-quality"},"Code Quality")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#code-analyser"},"Code Analyser")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#unit-testing"},"Unit Testing")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#workflow"},"Workflow")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#commands-utiles"},"Commands utiles")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#branches"},"Branches"))),(0,a.kt)("h3",{id:"solid"},"SOLID"),(0,a.kt)("p",null,"En programmation orient\xe9e objet, SOLID est un acronyme mn\xe9monique qui regroupe cinq principes de conception destin\xe9s \xe0 produire des architectures logicielles plus compr\xe9hensibles, flexibles et maintenables. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"[Single Responsibility Principle]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Une classe ne doit avoir qu'une seule et unique responsabilit\xe9"))),(0,a.kt)("li",{parentName:"ul"},"[Open/Closed Principle]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Les entit\xe9s doivent \xeatre ouvertes \xe0 l'extension et ferm\xe9es \xe0 la modification."))),(0,a.kt)("li",{parentName:"ul"},"[Liskov\u2019s Substitution Principle]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Les objets dans un programme doivent \xeatre rempla\xe7ables par des instances de leur sous-type sans pour autant alt\xe9rer le bon fonctionnement du programme."))),(0,a.kt)("li",{parentName:"ul"},"[Interface Segregation Principle]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Il vaut mieux faire plusieurs petites interfaces qu\u2019une seule grande."))),(0,a.kt)("li",{parentName:"ul"},"[Dependency Inversion Principle]",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Autrement dit, on \xe9vite de passer des objets en param\xe8tre lorsqu\u2019une interface est disponible.")))),(0,a.kt)("h3",{id:"code-quality"},"Code Quality"),(0,a.kt)("p",null,"friendsofphp/php-cs-fixer: A tool to automatically fix PHP Coding Standards issues"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ mkdir --parents tools/php-cs-fixer\n$ composer require --working-dir=tools/php-cs-fixer friendsofphp/php-cs-fixer\n$ tools/php-cs-fixer/vendor/bin/php-cs-fixer fix src\n")),(0,a.kt)("h3",{id:"code-analyser"},"Code Analyser"),(0,a.kt)("p",null,"PHPStan: PHP Static Analysis Tool - discover bugs in your code without running it!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ composer require --dev phpstan/phpstan\n$ vendor/bin/phpstan analyse ./src\n")),(0,a.kt)("h3",{id:"unit-testing"},"Unit Testing"),(0,a.kt)("p",null,"phpunit: The PHP Unit Testing framework."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ composer require --dev phpunit/phpunit symfony/test-pack\n$ vendor/bin/phpunit --coverage-clover=build/logs/clover.xml\n")),(0,a.kt)("h3",{id:"workflow"},"Workflow"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"D\xe9but du d\xe9veloppement: r\xe9cuperer la branche test, cr\xe9er votre branchee")," "),(0,a.kt)("p",null,"R\xe9cuperer les inforamtions du serveur git sans fusionner avec les codes locaux "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git fetch --all               \n")),(0,a.kt)("p",null,"R\xe9cuperer les codes du serveur git et fusionner avec les codes locaux "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git pull --all                \n")),(0,a.kt)("p",null,"Basculer vers la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git checkout master           \n")),(0,a.kt)("p",null,"Cr\xe9er une branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git branch `votre_branche`    \n")),(0,a.kt)("p",null,"Basculer vers la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git checkout `votre_branche`  \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Fin du d\xe9veloppement"),"  \t"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Etape 1"),": R\xe9cuperer la branche master du serveur, fusionner avec votre branche "),(0,a.kt)("p",null,"V\xe9rifier si il y a des changements, et la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git status                        \n    \n")),(0,a.kt)("p",null,"\xe0 la fin du developpement ajouter toutes les modifications"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git add .                         \n    \n")),(0,a.kt)("p",null,"Commettre avec une message"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ git commit -m "message des modifications"     \n')),(0,a.kt)("p",null,"V\xe9rifier si la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")," est propre"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git status                        \n")),(0,a.kt)("p",null,"Basculer vers la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git checkout master                \n    \n")),(0,a.kt)("p",null,"R\xe9cuperer la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," du serveur git\t\t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git pull origin master                \n")),(0,a.kt)("p",null,"Basculer vers la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git checkout `votre_branche`        \n")),(0,a.kt)("p",null,"Fusionner avec les codes de la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," et votre branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git merge master \n    \n")),(0,a.kt)("p",null,"\xe9ventuellement: ",(0,a.kt)("inlineCode",{parentName:"p"},"$ composer install")," plus ",(0,a.kt)("inlineCode",{parentName:"p"},"$ php bin/console doctrine:schema:update --force"),")"),(0,a.kt)("p",null,"Tester votre branche s'il fonctionne encore"),(0,a.kt)("p",null,"V\xe9rifier si il y a des changements, et la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche"),"\t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git status                        \n    \n")),(0,a.kt)("p",null,"\xe0 la fin du developpement ajouter toutes les modifications"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git add .                         \n")),(0,a.kt)("p",null,"Commettre avec une message\t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ git commit -m "fusionner master"      \n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Etape 2"),": Basculer vers la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master"),", fusionner votre branche avec --squash"),(0,a.kt)("p",null,"Basculer vers la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git checkout master               \n    \n")),(0,a.kt)("p",null,"Fusionner avec les codes du votre branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")," et la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git merge --squash `votre_branche`  \n    \n")),(0,a.kt)("p",null,"Eventuellement: ",(0,a.kt)("inlineCode",{parentName:"p"},"$ composer install")," plus ",(0,a.kt)("inlineCode",{parentName:"p"},"$ php bin/console doctrine:schema:update --force"),")"),(0,a.kt)("p",null,"Option ",(0,a.kt)("inlineCode",{parentName:"p"},"--squash")," pour rec\xe9er les commits messages de la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," plus proprement"),(0,a.kt)("p",null,"Tester votre branche s'il fonctionne encore"),(0,a.kt)("p",null,"V\xe9rifier si il y a des changements, et la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master"),"\t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git status                        \n    *\n")),(0,a.kt)("p",null,"Ajouter toutes les modifications"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git add .                         \n")),(0,a.kt)("p",null,"Commettre avec une message\t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ git commit -m "message des modifications"\n    \n')),(0,a.kt)("p",null,"Envoyer les codes de la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," au serveur"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git push origin master                \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Etape 3"),": Retourner vers votre branche pour l'autre d\xe9veloppement"),(0,a.kt)("p",null,"Basculer vers la branche ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git checkout `votre_branche`        \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Installation du projet avec git")," "),(0,a.kt)("p",null,"Si vous avez d\xe9j\xe0 le dossier du d\xe9veloppement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ cd `votre_dossier` \n")),(0,a.kt)("p",null,"Cr\xe9er un projet initial en git"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git init                          \n")),(0,a.kt)("p",null,"Ajouetr un remote git r\xe9positorie"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git remote add origin git@`votre_serveur`:/home/git/`votre_projet`.git  \n")),(0,a.kt)("p",null,"Si vous n'avez pas le dossier du d\xe9veloppement"),(0,a.kt)("p",null,"Cloner le projet"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git clone git@`votre_serveur`:/home/git/`votre_projet`.git `votre_dossier`  \n")),(0,a.kt)("h3",{id:"commands-utiles"},"Commands utiles"),(0,a.kt)("p",null,"Afficher la information du serveur remote de git"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git remote -v          \n")),(0,a.kt)("p",null,"Afficher les inforamtions de la changement et de la branche"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git status            \n")),(0,a.kt)("p",null,"Afficher les branches locales et les branches remotes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git branch -a        \n")),(0,a.kt)("p",null,"Afficher les branches locales, les branches remotes et les relations\t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git branch -vv    \n")),(0,a.kt)("p",null,"Afficher que les messages de commettre\t"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git log --oneline     \n")),(0,a.kt)("p",null,"Lier la branche locale vers la branche remote ex: ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git push --set-upstream origin `votre_branche` \n")),(0,a.kt)("p",null,"Pouser la branche locale vers la branche remote ex: ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git push origin `votre_branche`\n")),(0,a.kt)("p",null,"Modifer le message du dernier commettre"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git commit --amend    \n")),(0,a.kt)("p",null,"Supprimer la branche locale ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git branch -d `votre_branche`     \n")),(0,a.kt)("p",null,"Supprimer la branche locale ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")," en force"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git branch -D `votre_branche`     \n")),(0,a.kt)("p",null,"Supprimer la branche remote ",(0,a.kt)("inlineCode",{parentName:"p"},"votre_branche")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git push origin --delete `votre_branche` \n")),(0,a.kt)("p",null,"Affichier les fichiers qui ont \xe9t\xe9 modifi\xe9s entre les commetres ",(0,a.kt)("inlineCode",{parentName:"p"},"55dc9e34"),"...",(0,a.kt)("inlineCode",{parentName:"p"},"575c9e34")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git diff --nameonly 55dc9e34...575c9e34 \n")),(0,a.kt)("p",null,"Definir l'editor par default"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git config --global core.editor \"'c:/Program Files/Sublime Text 3/sublime_text.exe' -w\"\n                            \n")),(0,a.kt)("p",null,"Afficher les fichiers commetres par le commit ",(0,a.kt)("inlineCode",{parentName:"p"},"commit")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git show `commit` --name-only \n")),(0,a.kt)("p",null,"Combiner 3 commits \xe0 1 commit, mais avant le push"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git reset --soft HEAD~3 && git commit             \n")),(0,a.kt)("p",null,"Combiner 5 commits \xe0 1 commit, mais avant le push"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git rebase -i HEAD~5      \n")),(0,a.kt)("h3",{id:"branches"},"Branches"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Branche master: la branche pour tester et valider et avant d\xe9livrer vers la branche release"),(0,a.kt)("li",{parentName:"ul"},"Branche dev_1: la branche du d\xe9veloppement de dev_1"),(0,a.kt)("li",{parentName:"ul"},"Branche dev_2: la branche du d\xe9veloppement de dev_2"),(0,a.kt)("li",{parentName:"ul"},"Branche dev_3: la branche du d\xe9veloppement de dev_3"),(0,a.kt)("li",{parentName:"ul"},"Branche release_1.0.0: la branche de la version 1.0.0"),(0,a.kt)("li",{parentName:"ul"},"Branche release_1.0.1: la branche de la version 1.0.1")))}c.isMDXComponent=!0}}]);