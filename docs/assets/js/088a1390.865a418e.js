"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[66440],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var o=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=p(t),d=i,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||s;return t?o.createElement(f,r(r({ref:n},l),{},{components:t})):o.createElement(f,r({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,r=new Array(s);r[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[u]="string"==typeof e?e:i,r[1]=a;for(var p=2;p<s;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},18998:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var o=t(87462),i=(t(67294),t(3905));const s={},r="setting-up-a-notifications-system-in-symfony-projects",a={unversionedId:"WebAPI/web-push/setting-up-a-notifications-system-in-symfony-project",id:"WebAPI/web-push/setting-up-a-notifications-system-in-symfony-project",title:"setting-up-a-notifications-system-in-symfony-projects",description:"https://www.grossum.com/blog/setting-up-a-notifications-system-in-symfony-projects",source:"@site/docs/WebAPI/web-push/setting-up-a-notifications-system-in-symfony-project.md",sourceDirName:"WebAPI/web-push",slug:"/WebAPI/web-push/setting-up-a-notifications-system-in-symfony-project",permalink:"/notebook/docs/WebAPI/web-push/setting-up-a-notifications-system-in-symfony-project",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/WebAPI/web-push/setting-up-a-notifications-system-in-symfony-project.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adding Push Notifications to a Web App",permalink:"/notebook/docs/WebAPI/web-push/Adding Push Notifications to a Web App"},next:{title:"Web Push library for PHP",permalink:"/notebook/docs/WebAPI/web-push/web-push-php"}},c={},p=[],l={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setting-up-a-notifications-system-in-symfony-projects"},"setting-up-a-notifications-system-in-symfony-projects"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.grossum.com/blog/setting-up-a-notifications-system-in-symfony-projects"},"https://www.grossum.com/blog/setting-up-a-notifications-system-in-symfony-projects")),(0,i.kt)("p",null,"##RMSPushNotifications"),(0,i.kt)("p",null,"Symfony bundle for this. It allows sending notifications/messages for mobile devices and supports such platforms as iOS, Android (C2DM, GCM), Blackberry and Windows Phone (toast only)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"composer require richsage/rms-push-notifications-bundle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use RMS\\PushNotificationsBundle\\Message\\iOSMessage;\n \nclass PushDemoController extends Controller\n{\n   public function pushAction()\n   {\n       $message = new iOSMessage();\n       $message->setMessage('Oh my! A push notification!');\n       $message->setDeviceIdentifier('test012fasdf482asdfd63f6d7bc6d4293aedd5fb448fe505eb4asdfef8595a7');\n \n       $this->container->get('rms_push_notifications')->send($message);\n \n       return new Response('Push notification send!');\n   }\n}\n")),(0,i.kt)("p",null,"##EndroidGCM, "),(0,i.kt)("p",null,"which is a Google Cloud Messaging bundle used with Symfony projects. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"composer require endroid/gcm-bundle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\npublic function gcmSendAction()\n{\n   $client = $this->get('endroid.gcm.client');\n \n   $registrationIds = array(\n       // Registration ID's of devices to target\n   );\n \n   $data = array(\n       'title' => 'Message title',\n       'message' => 'Message body',\n   );\n \n   $response = $client->send($data, $registrationIds);\n \n   ...\n}\n")),(0,i.kt)("p",null,"##TEXT MESSAGE / SMS"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"composer require kronas/smpp-client-bundle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$smpp = $this->get('kronas_smpp_client.transmitter');\n$smpp->send($phone_number, $message);\n")),(0,i.kt)("p",null,"##EMAIL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"composer require hipaway-travel/mandrill-bundle\n \n$dispatcher = $this->get('hip_mandrill.dispatcher');\n       $message = new Message();\n       $message\n           ->setFromEmail('mail@example.com')\n           ->setFromName('Customer Care')\n           ->addTo('max.customer@email.com')\n           ->setSubject('Some Subject')\n           ->setHtml('<html><body><h1>Some Content</h1></body></html>')\n           ->setSubaccount('Project');\n       $result = $dispatcher->send($message);\n")),(0,i.kt)("p",null,"##SOCKET:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"composer require gos/web-socket-bundle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var webSocket = WS.connect(\u201cws:_/_/127.0.0.1:8000\u201d);\nwebSocket.on(\u201csocket/connect\u201d, function(session){\n    //session is an Autobahn JS WAMP session.\nconsole .log(\u201cSuccessfully Connected!\u201d);\n})\nwebSocket.on(\u201csocket/disconnect\u201d, function(error){\n    //error provides us with some insight into the disconnection: error.reason and error.code\nconsole .log(\u201cDisconnected for \u201d + error.reason + \u201c with code \u201d + error.code);\n})\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/**\n    * This will receive any Subscription requests for this topic.\n    *\n    * @param ConnectionInterface $connection\n    * @param Topic $topic\n    * @param WampRequest $request\n    * @return void\n    */\n   public function onSubscribe(ConnectionInterface $connection, Topic $topic, WampRequest $request)\n   {\n       //this will broadcast the message to ALL subscribers of this topic.\n       $topic->broadcast(['msg' => $connection->resourceId . ' has joined ' . $topic->getId()]);\n   }\n")),(0,i.kt)("p",null,"##GROSSUM SYMFONY NOTIFICATION BUNDLE"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"composer require grossum/notification-bundle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$userNotification = new MessageNotification();\n\n   $userNotification\n       ->setType(NotificationInterface::SOCKET_NOTIFICATION_TYPE_WEB_NOTIFICATION)\n       ->setContent('You have created task to demo NotificationBundle')\n       ->setMediaUrl('https://pbs.twimg.com/profile_images/564783819580903424/2aQazOP3.png')\n       ->setTitle('You have created task to demo NotificationBundle')\n       ->setCreatedAt(new \\DateTime())\n       ->setRecipientHashes(['sds12']);\n\n   $this->disptacher->dispatch(\n       'grossum.notification.event.send_notification',\n       new NotificationCreatedEvent($userNotification)\n   );\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'  grossum.notification.notification_sender.email:\n    class: %grossum.notification.notification_sender.email.class%\n    arguments:\n      - "@old_sound_rabbit_mq.send_email_producer"\n \n grossum.notification.event_listener.email_produce:\n    class: %grossum.notification.event_listener.email_produce.class%\n    arguments:\n      - "@grossum.notification.notification_sender.email"\n    tags:\n      - { name: kernel.event_listener, event: grossum.notification.event.send_email, method: produceNotifications }\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"EmailNotificationProduceListener\n/**\n   * @param NotificationSenderInterface $notificationSender\n   */\n  public function __construct(NotificationSenderInterface $notificationSender)\n  {\n      $this->notificationSender = $notificationSender;\n  }\ninterface NotificationSenderInterface\n{\n   /**\n    * @param NotificationInterface $notification\n    */\n   public function sendNotification(NotificationInterface $notification);\n}\n/**\n    * {@inheritdoc}\n    */\n   public function sendNotification(NotificationInterface $message)\n   {\n       try {\n           if ($message->isValid()) {\n               $this->producer->publish(json_encode($message->exportData()));\n           }\n       } catch (\\Exception $e) {\n           //TODO: add logging\n       }\n   }\ninterface NotificationInterface\n{\n   const SOCKET_NOTIFICATION_TYPE_ENTITY_UPDATE = 'entity_update';\n   const SOCKET_NOTIFICATION_TYPE_ENTITY_DELETE = 'entity_delete';\n   const SOCKET_NOTIFICATION_TYPE_CHAT_MESSAGE = 'chat_message';\n   const SOCKET_NOTIFICATION_TYPE_WEB_NOTIFICATION = 'web_notification';\n   const PHONE_OS_TYPE_IOS = 'phone_ios';\n   const PHONE_OS_TYPE_WINDOWS = 'phone_windows';\n   const PHONE_OS_TYPE_ANDROID = 'phone_android';\n   /**\n    * @return array\n    */\n   public function exportData();\n   /**\n    * @return bool\n    */\n   public function isValid();\n}\n")))}u.isMDXComponent=!0}}]);