"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3259],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var s=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},a=Object.keys(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)r=a[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=s.createContext({}),u=function(e){var t=s.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return s.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return r?s.createElement(f,i(i({ref:t},c),{},{components:r})):s.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var u=2;u<a;u++)i[u]=r[u];return s.createElement.apply(null,i)}return s.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8677:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var s=r(7462),n=(r(7294),r(3905));const a={},i="Assertions",o={unversionedId:"PHP/Tests/PHPunit/assertions",id:"PHP/Tests/PHPunit/assertions",title:"Assertions",description:"assertInstanceOf()",source:"@site/docs/PHP/Tests/PHPunit/assertions.md",sourceDirName:"PHP/Tests/PHPunit",slug:"/PHP/Tests/PHPunit/assertions",permalink:"/notebook/docs/PHP/Tests/PHPunit/assertions",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/PHP/Tests/PHPunit/assertions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Annotations",permalink:"/notebook/docs/PHP/Tests/PHPunit/annotations"},next:{title:"command line",permalink:"/notebook/docs/PHP/Tests/PHPunit/command-line"}},l={},u=[{value:"assertInstanceOf()",id:"assertinstanceof",level:2},{value:"assertSame() vs assertEquals()",id:"assertsame-vs-assertequals",level:2},{value:"assertTrue()",id:"asserttrue",level:2},{value:"assertNotSame()",id:"assertnotsame",level:2},{value:"assertStringContainsString()",id:"assertstringcontainsstring",level:2},{value:"assertCount()",id:"assertcount",level:2},{value:"assertNull()",id:"assertnull",level:2},{value:"expectException()",id:"expectexception",level:2}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,s.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"assertions"},"Assertions"),(0,n.kt)("h2",{id:"assertinstanceof"},"assertInstanceOf()"),(0,n.kt)("h2",{id:"assertsame-vs-assertequals"},"assertSame() vs assertEquals()"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"assertSame(): the return values have the same type and value.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"assertSame('2204', 2204) // this test fails"))),(0,n.kt)("li",{parentName:"ul"},"assertEquals(): the return values have the same value.",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"assertEquals('2204', 2204)  // this test passes")))),(0,n.kt)("h2",{id:"asserttrue"},"assertTrue()"),(0,n.kt)("h2",{id:"assertnotsame"},"assertNotSame()"),(0,n.kt)("h2",{id:"assertstringcontainsstring"},"assertStringContainsString()"),(0,n.kt)("h2",{id:"assertcount"},"assertCount()"),(0,n.kt)("h2",{id:"assertnull"},"assertNull()"),(0,n.kt)("h2",{id:"expectexception"},"expectException()"))}p.isMDXComponent=!0}}]);