"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[23208],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,k=m["".concat(i,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(k,s(s({ref:t},u),{},{components:n})):r.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[m]="string"==typeof e?e:o,s[1]=l;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},36355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={},s="Top 6 BEST Python Testing Frameworks",l={unversionedId:"Python/Test/Top 6 BEST Python Testing Frameworks",id:"Python/Test/Top 6 BEST Python Testing Frameworks",title:"Top 6 BEST Python Testing Frameworks",description:"Robot",source:"@site/docs/Python/Test/Top 6 BEST Python Testing Frameworks.md",sourceDirName:"Python/Test",slug:"/Python/Test/Top 6 BEST Python Testing Frameworks",permalink:"/notebook/docs/Python/Test/Top 6 BEST Python Testing Frameworks",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Python/Test/Top 6 BEST Python Testing Frameworks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Running a Jupyter Notebook Server Using Docker",permalink:"/notebook/docs/Python/Running a Jupyter Notebook Server Using Docker"},next:{title:"The Complete Collection of Data Science Cheat Sheets",permalink:"/notebook/docs/Python/The Complete Collection of Data Science Cheat Sheets"}},i={},p=[{value:"Robot",id:"robot",level:3},{value:"PyTest",id:"pytest",level:3},{value:"Unittest",id:"unittest",level:3},{value:"DocTest",id:"doctest",level:3},{value:"Nose2",id:"nose2",level:3},{value:"Testify",id:"testify",level:3}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"top-6-best-python-testing-frameworks"},"Top 6 BEST Python Testing Frameworks"),(0,o.kt)("h3",{id:"robot"},"Robot"),(0,o.kt)("p",null,"The most popular Robot Framework is an open-source Automation Testing framework based on Python."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"*** Settings ***\nLibrary           SeleniumLibrary\n \n*** Variables ***\n${SERVER}         localhost:7272\n${BROWSER}        Firefox\n${DELAY}        0\n${VALID USER}     demo\n${VALID PASSWORD}    mode\n${LOGIN URL}      http://${SERVER}/\n${WELCOME URL}    http://${SERVER}/welcome.html\n${ERROR URL}      http://${SERVER}/error.html\n\n*** Keywords ***\nOpen Browser To Login Page\n    Open Browser    ${LOGIN URL}    ${BROWSER}\n    Maximize Browser Window\n    Set Selenium Speed    ${DELAY}\nLogin Page Should Be Open\n    Title Should Be    Login Page\n \nGo To Login Page\n    Go To    ${LOGIN URL}\n    Login Page Should Be Open\n \nInput Username\n    [Arguments]    ${username}\n    Input Text    username_field    ${username}\n \nInput Password\n    [Arguments]    ${password}\n    Input Text    password_field    ${password}\n \nSubmit Credentials\n    Click Button    login_button\n \nWelcome Page Should Be Open\n    Location Should Be    ${WELCOME URL}\n    Title Should Be    Welcome Page\n")),(0,o.kt)("p",null,"Resources: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pypi.org/project/robotframework/"},"https://pypi.org/project/robotframework/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html"},"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html"))),(0,o.kt)("h3",{id:"pytest"},"PyTest"),(0,o.kt)("p",null,"PyTest is an open-source Python-based testing framework that is generally all-purpose but especially for Functional and API testing."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import pytest                          #Import unittest module\ndef test_file1_method():               #Function inside class\n      x=5\n      y=6\n      assert x+1 == y,"test failed"\n')),(0,o.kt)("p",null,"Packages/Methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"pytest.approx()"),(0,o.kt)("li",{parentName:"ul"},"pytest.fail()"),(0,o.kt)("li",{parentName:"ul"},"pytest.skip()"),(0,o.kt)("li",{parentName:"ul"},"pytest.exit()"),(0,o.kt)("li",{parentName:"ul"},"pytest.main()"),(0,o.kt)("li",{parentName:"ul"},"pytest.raises()"),(0,o.kt)("li",{parentName:"ul"},"pytest.warns()")),(0,o.kt)("p",null,"Resources:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.pytest.org/en/latest/reference/reference.html"},"https://docs.pytest.org/en/latest/reference/reference.html")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pypi.org/project/pytest/"},"https://pypi.org/project/pytest/"))),(0,o.kt)("h3",{id:"unittest"},"Unittest"),(0,o.kt)("p",null,"Unittest is the very first Python-based automated unit test framework that was designed to work with the Python standard library."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import unittest                        #Import unittest module\ndef add(x,y):\n   return x + y\n \nclass Test(unittest.TestCase):         #Define your class with testcase\n \n   def addition(self):\n      self.assertEquals(add(4,5),9)<strong>  #Function inside class\n \nif __name__ == '__main__':\n   unittest.main()<strong>  #Insert main() method\n")),(0,o.kt)("p",null,"Packages/Methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"setUp()"),(0,o.kt)("li",{parentName:"ul"},"tearDown()"),(0,o.kt)("li",{parentName:"ul"},"setUpClass()"),(0,o.kt)("li",{parentName:"ul"},"tearDownClass()"),(0,o.kt)("li",{parentName:"ul"},"run()"),(0,o.kt)("li",{parentName:"ul"},"debug()"),(0,o.kt)("li",{parentName:"ul"},"addTest()"),(0,o.kt)("li",{parentName:"ul"},"Discover()"),(0,o.kt)("li",{parentName:"ul"},"assertEqual(a,b)"),(0,o.kt)("li",{parentName:"ul"},"asserTrue/assertFalse(condition)")),(0,o.kt)("p",null,"Resources:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/unittest.html"},"https://docs.python.org/3/library/unittest.html")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Codewars/python-unittest"},"https://github.com/Codewars/python-unittest"))),(0,o.kt)("h3",{id:"doctest"},"DocTest"),(0,o.kt)("p",null,"Doctest is a module that is included in Python\u2019s standard distribution and is used for White-box Unit Testing."),(0,o.kt)("p",null,"Example: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def test(n): \nimport math\n    if not n >= 0:\n        raise ValueError("n must be >= 0") #number should be 0 or greater than 0\n    if math.floor(n) != n:\n               raise ValueError("n must be exact integer")   #Error when number is not an integer\n  if n+1 == n:  \n        raise OverflowError("n too large") #Error when number is too large\n    r = 1\n    f = 2\n    while f <= n:         #Calculate factorial\n        r *= f\n        f += 1\n    return r\n \nif __name__ == "__main__":\n     import doctest               #Import doctest\n    doctest.testmod()             #Calling the testmod method\n')),(0,o.kt)("p",null,"Packages/Functions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"doctest.testfile()"),(0,o.kt)("li",{parentName:"ul"},"doctest.testmod()"),(0,o.kt)("li",{parentName:"ul"},"doctest.DocFileSuite()"),(0,o.kt)("li",{parentName:"ul"},"doctest.DocTestSuite()")),(0,o.kt)("p",null,"Resources:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.python.org/2/library/doctest.html#basic-api"},"https://docs.python.org/2/library/doctest.html#basic-api")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/doctest/doctest"},"https://github.com/doctest/doctest"))),(0,o.kt)("h3",{id:"nose2"},"Nose2"),(0,o.kt)("p",null,"Nose2 is the successor of Nose and it is a Python-based Unit Testing framework that can run Doctests and UnitTests."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from mynum import *\nimport nose\n \ndef test_add_integers():\n    assert add(5, 3) == 8\n \ndef test_add_floats():\n    assert add(1.5, 2.5) == 4\n \ndef test_add_strings():\n    nose.tools.assert_raises(AssertionError, add, 'paul', 'carol') \n// To throw one of the expected exception to pass\n \nif __name__ == '__main__':   \n    nose.run()\n")),(0,o.kt)("p",null,"Packages/Methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"nose.tools.ok_"),(0,o.kt)("li",{parentName:"ul"},"nose.tools.make_decorator"),(0,o.kt)("li",{parentName:"ul"},"nose.tools.raises"),(0,o.kt)("li",{parentName:"ul"},"nose.tools.timed"),(0,o.kt)("li",{parentName:"ul"},"nose.tools.with_setup"),(0,o.kt)("li",{parentName:"ul"},"nose.tools.intest"),(0,o.kt)("li",{parentName:"ul"},"nose.tools.nottest")),(0,o.kt)("p",null,"Resources:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pypi.org/project/nose2/"},"https://pypi.org/project/nose2/"))),(0,o.kt)("h3",{id:"testify"},"Testify"),(0,o.kt)("p",null,"Testify was designed to replace unittest and nose. Testify has more advanced features over unittest."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from testify import *\n \nclass AdditionTestCase(TestCase):\n \n    @class_setup\n    def init_the_variable(self):\n        self.variable = 0\n \n    @setup\n    def increment_the_variable(self):\n        self.variable += 1\n \n    def test_the_variable(self):\n        assert_equal(self.variable, 1)\n \n    @suite('disabled', reason='ticket #123, not equal to 2 places')\n    def test_broken(self):\n        # raises 'AssertionError: 1 !~= 1.01'\n        assert_almost_equal(1, 1.01, threshold=2)\n \n    @teardown\n    def decrement_the_variable(self):\n        self.variable -= 1\n \n    @class_teardown\n    def get_rid_of_the_variable(self):\n        self.variable = None\n \nif __name__ == \"__main__\":\nrun()\n")),(0,o.kt)("p",null,"Packages/Methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"assert"),(0,o.kt)("li",{parentName:"ul"},"mock"),(0,o.kt)("li",{parentName:"ul"},"require"),(0,o.kt)("li",{parentName:"ul"},"suite")))}m.isMDXComponent=!0}}]);