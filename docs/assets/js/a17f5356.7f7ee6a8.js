"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[65661],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,h=p["".concat(o,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(h,l(l({ref:n},d),{},{components:t})):a.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},17412:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={},l="Complete Guide to Elasticsearch 2.1 - 2015",s={unversionedId:"ElasticSearch/Guide/Complete Guide to Elasticsearch 2_1 - 2015",id:"ElasticSearch/Guide/Complete Guide to Elasticsearch 2_1 - 2015",title:"Complete Guide to Elasticsearch 2.1 - 2015",description:"how-to-completely-uninstall-elasticsearch",source:"@site/docs/ElasticSearch/Guide/Complete Guide to Elasticsearch 2_1 - 2015.md",sourceDirName:"ElasticSearch/Guide",slug:"/ElasticSearch/Guide/Complete Guide to Elasticsearch 2_1 - 2015",permalink:"/notebook/docs/ElasticSearch/Guide/Complete Guide to Elasticsearch 2_1 - 2015",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/ElasticSearch/Guide/Complete Guide to Elasticsearch 2_1 - 2015.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ElasticSearch Roadmap",permalink:"/notebook/docs/ElasticSearch/ElasticSearch Roadmap"},next:{title:"Elasticsearch The definitive guide",permalink:"/notebook/docs/ElasticSearch/Guide/Elasticsearch The definitive guide"}},o={},c=[{value:"how-to-completely-uninstall-elasticsearch",id:"how-to-completely-uninstall-elasticsearch",level:2},{value:"Installing Elasticsearch",id:"installing-elasticsearch",level:2},{value:"Introduction to Elasticsearch",id:"introduction-to-elasticsearch",level:2},{value:"mappings",id:"mappings",level:2},{value:"Field data types",id:"field-data-types",level:2},{value:"Adding mappings",id:"adding-mappings",level:2},{value:"Adding test data",id:"adding-test-data",level:2},{value:"Meta fields",id:"meta-fields",level:2},{value:"Creating an index (/ecommerce)**",id:"creating-an-index-ecommerce",level:2},{value:"cat indices",id:"cat-indices",level:2},{value:"Deleting an index",id:"deleting-an-index",level:2},{value:"listing all index",id:"listing-all-index",level:2},{value:"Adding documents (/index/document/id)",id:"adding-documents-indexdocumentid",level:2},{value:"Updating documents",id:"updating-documents",level:2},{value:"Replacing documents",id:"replacing-documents",level:2},{value:"Deleting documents",id:"deleting-documents",level:2},{value:"get a document",id:"get-a-document",level:2},{value:"Batch processing",id:"batch-processing",level:2},{value:"Searching",id:"searching",level:2},{value:"example1",id:"example1",level:2},{value:"Retrieving document by ID",id:"retrieving-document-by-id",level:2},{value:"Searching with query strings - Basics",id:"searching-with-query-strings---basics",level:2},{value:"Searching with query strings - Bool query",id:"searching-with-query-strings---bool-query",level:2},{value:"Searching with query strings - Remarks",id:"searching-with-query-strings---remarks",level:2},{value:"Searching with Query DSL - Compound queries",id:"searching-with-query-dsl---compound-queries",level:2},{value:"Searching with Query DSL - Full text queries",id:"searching-with-query-dsl---full-text-queries",level:2},{value:"Multi_match",id:"multi_match",level:2},{value:"match_phrase",id:"match_phrase",level:2},{value:"Searching with Query DSL - Term level queries",id:"searching-with-query-dsl---term-level-queries",level:2},{value:"suggestion",id:"suggestion",level:2}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"complete-guide-to-elasticsearch-21---2015"},"Complete Guide to Elasticsearch 2.1 - 2015"),(0,r.kt)("h2",{id:"how-to-completely-uninstall-elasticsearch"},"how-to-completely-uninstall-elasticsearch"),(0,r.kt)("p",null,"Find where is elasticsearch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ find / -name "elasticsearch"\n')),(0,r.kt)("p",null,"Then remove the folders. Also, remove service script at"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ cd /etc/init.d/elasticsearch\n")),(0,r.kt)("p",null,"It's just java files, no magic (almost)."),(0,r.kt)("h2",{id:"installing-elasticsearch"},"Installing Elasticsearch"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Installing Elasticsearch"),(0,r.kt)("li",{parentName:"ol"},"Installing Kibana"),(0,r.kt)("li",{parentName:"ol"},"Installing Sense")),(0,r.kt)("h2",{id:"introduction-to-elasticsearch"},"Introduction to Elasticsearch"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Introduction to Elasticsearch")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Introduction to mapping")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Introduction to searching"),(0,r.kt)("p",{parentName:"li"},"$ curl -X GET ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9200/ecommerce/product/_search?q=pasta")))),(0,r.kt)("h2",{id:"mappings"},"mappings"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.medflixs.com:8089/app/sense"},"http://www.medflixs.com:8089/app/sense"),"\n",(0,r.kt)("a",{parentName:"p",href:"http://www.medflixs.com:9200"},"http://www.medflixs.com:9200")),(0,r.kt)("h2",{id:"field-data-types"},"Field data types"),(0,r.kt)("p",null,"Core data types\nString, numeric, data, boolean, binary\nComplex data types\nObjects, array, nested\nGeo data types\nGeo-point, Geo shape\nSpeciallized data types\nIPv4, completion, token count, attachement   "),(0,r.kt)("h2",{id:"adding-mappings"},"Adding mappings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    PUT  /ecommerce\n    {\n        "mappings": {\n            "product": {\n                "properties": {\n                    "name": {\n                        "type": "string"\n                    },\n                    "price": {\n                        "type": "double"\n                    },\n                    "status": {\n                        "type": "string"\n                    },\n                    "quantity": {\n                        "type": "integer"\n                    },\n                    "categories": {\n                        "type": "nested",\n                        "properties": {\n                            "name": {\n                                "type": "string"\n                            }\n                        }\n                    }, \n                    "tags": {\n                        "type": "string"\n                    }\n                }\n            }\n        }\n    }\n')),(0,r.kt)("h2",{id:"adding-test-data"},"Adding test data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ curl -XPOST http://localhost:9200/ecommerce/product/_bulk --data-binary "@test-data.json"\n')),(0,r.kt)("h2",{id:"meta-fields"},"Meta fields"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"_index\n_type\n_id\n\n_source\n\n$ sudo bin/plugin install mapper-size\n")),(0,r.kt)("h2",{id:"creating-an-index-ecommerce"},"Creating an index (/ecommerce)**"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    PUT  /ecommerce\n    {}\n")),(0,r.kt)("h2",{id:"cat-indices"},"cat indices"),(0,r.kt)("p",null,"The indices command provides a cross-section of each index. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET \n")),(0,r.kt)("h2",{id:"deleting-an-index"},"Deleting an index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DELETE /ecommerce\n")),(0,r.kt)("h2",{id:"listing-all-index"},"listing all index"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /_cat/indices?v\n")),(0,r.kt)("h2",{id:"adding-documents-indexdocumentid"},"Adding documents (/index/document/id)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    PUT  /ecommerce/product/1001\n    {\n        "SortAs": "SGML",\n        "GlossTerm": "Standard Generalized Markup Language",\n        "Acronym": "SGML",\n        "Abbrev": "ISO 8879:1986",\n        "categories": [\n                {\n                    "name": "Sofware",\n                    +"GlossSee": "markup"\n                }  \n        ],\n        "tags": ["A meta-markup language", "used to create markup languages such as", "DocBook"]         \n    }\n')),(0,r.kt)("h2",{id:"updating-documents"},"Updating documents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    POST /ecommerce/product/1001/_update\n    {\n        "doc": {\n            SortAs": "SGML2",\n        }\n    }    \n\n')),(0,r.kt)("h2",{id:"replacing-documents"},"Replacing documents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    PUT  /ecommerce/product/1001\n    {\n        "SortAs": "SGML2",\n        "GlossTerm": "Standard Generalized Markup Language",\n        "Acronym": "SGML2",\n        "Abbrev": "ISO 8879:1986",\n        "categories": [\n                {\n                    "name": "Sofware",\n                    +"GlossSee": "markup"\n                }  \n        ],\n        "tags": ["A meta-markup language", "used to create markup languages such as", "DocBook"]         \n    }\n')),(0,r.kt)("h2",{id:"deleting-documents"},"Deleting documents"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    DELETE /ecommerce/product/1001\n")),(0,r.kt)("h2",{id:"get-a-document"},"get a document"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /my_index/my_type/my_id\n")),(0,r.kt)("h2",{id:"batch-processing"},"Batch processing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    POST /ecommerce/product/_bulk\n    {"index": {"_id":"1002"}}\n    {\n        "SortAs": "SGML2",\n        "GlossTerm": "Standard Generalized Markup Language",\n        "Acronym": "SGML2",\n        "Abbrev": "ISO 8879:1986",\n        "categories": [\n                {\n                    "name": "Sofware",\n                    +"GlossSee": "markup"\n                }  \n        ],\n        "tags": ["A meta-markup language", "used to create markup languages such as", "DocBook"]         \n    }\n    {"index": {"_id":"1003"}}\n    {\n        "SortAs": "SGML3",\n        "GlossTerm": "Standard Generalized Markup Language",\n        "Acronym": "SGML3",\n        "Abbrev": "ISO 8879:1986",\n        "categories": [\n                {\n                    "name": "Sofware",\n                    +"GlossSee": "markup"\n                }  \n        ],\n        "tags": ["A meta-markup language", "used to create markup languages such as", "DocBook"]         \n    }\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    POST /ecommerce/_bulk\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    POST /_bulk\n    {"update": {"_id":"1002", "_index": "ecommerce", "_type": "product"}}\n    {"doc": {"SortAs": "SGML22"}}\n')),(0,r.kt)("h2",{id:"searching"},"Searching"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.medflixs.com.loc:81/app/sense"},"http://www.medflixs.com.loc:81/app/sense"),"\n",(0,r.kt)("a",{parentName:"p",href:"http://www.medflixs.com:8089/app/sense"},"http://www.medflixs.com:8089/app/sense")),(0,r.kt)("h2",{id:"example1"},"example1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /inteldata_db/twitter/_search\n{\n  "query": {\n    "match_all": {}\n  }\n}\n')),(0,r.kt)("h2",{id:"retrieving-document-by-id"},"Retrieving document by ID"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /medflixs_en/video/950\n")),(0,r.kt)("h2",{id:"searching-with-query-strings---basics"},"Searching with query strings - Basics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /medflixs_en/video/_search?q=benjamin\n\nGET /medflixs_en/video/_search?q=Cardiomyopathie\n\nGET /medflixs_en/video/_search?q=title:Cardiomyopathie\n")),(0,r.kt)("h2",{id:"searching-with-query-strings---bool-query"},"Searching with query strings - Bool query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /medflixs_en/video/_search?q=-Elena+minimally\n")),(0,r.kt)("p",null,"without ",(0,r.kt)("inlineCode",{parentName:"p"},"elena")," but have ",(0,r.kt)("inlineCode",{parentName:"p"},"minimally")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /medflixs_en/video/_search?q=-Tommaso-minimally-benjamin-2015\n")),(0,r.kt)("p",null,"without -Tommaso-minimally-benjamin-2015"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /medflixs_en/video/_search?q=+Tommaso+minimally+benjamin+2015\n\nGET /medflixs_en/video/_search?q=*shen*\nGET /medflixs_en/video/_search?q=*shen\nGET /medflixs_en/video/_search?q=shen\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Searching with query strings - Phrase query")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /_analyze?analyzer=standard&text=yi\n\nGET /_analyze?analyzer=standard&text=yi+banjamin\n")),(0,r.kt)("h2",{id:"searching-with-query-strings---remarks"},"Searching with query strings - Remarks"),(0,r.kt)("h2",{id:"searching-with-query-dsl---compound-queries"},"Searching with Query DSL - Compound queries"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"must")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "bool": {\n            "must":[\n                { "match": {"title": "innovation"}},\n                { "match": {"title": "2014"}}     \n            ]\n        }\n    },\n      "options" : [ {\n        "text" : "xorr the god jewel",\n        "highlighted": "<em>xorr</em> the <em>god</em> jewel",\n        "score" : 0.17877324\n      }    \n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"must_not")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "bool": {\n            "must":[\n                { "match": {"title": "innovation"}},\n            ], \n            "must_not":[\n                { "match": {"speaker": "Patrick"}}\n            ]            \n        }\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"should")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "bool": {\n            "must":[\n                { "match": {"title": "innovation"}},\n            ], \n            "should":[\n                { "match": {"speaker": "Patrick"}}\n            ]            \n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "bool": {\n            "should":[\n                { "match": {"speaker": "Patrick"}}\n            ]            \n        }\n    }\n}\n')),(0,r.kt)("p",null,"operator or "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    GET /medflixs_en/video/_search\n    {\n        "query": {\n            "match": {\n               "_all": {\n                  "query": "benjamin 2015",\n                  "operator": "or"\n               }\n            }\n        }\n    }\n')),(0,r.kt)("p",null,"operator and "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    GET /medflixs_en/video/_search\n    {\n        "query": {\n            "match": {\n               "_all": {\n                  "query": "benjamin 2015",\n                  "operator": "and"\n               }\n            }\n        }\n    }\n')),(0,r.kt)("h2",{id:"searching-with-query-dsl---full-text-queries"},"Searching with Query DSL - Full text queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "match_all": {}\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"            // get total post\n            $stats_elasticsearch['post'] = 0;\n            $hosts = [\n                'http://user:pass@localhost:9200'\n            ];   \n\n            // elastic Search client\n            $client = \\Elasticsearch\\ClientBuilder::create()->setHosts($hosts)->build();\n\n            $searchParams = []; \n            $searchParams['index'] = 'inteldata_db';\n            $searchParams['type'] = 'post';\n\n            $searchParams['body']['query'] = array( \"match_all\" => array());\n\n            try {\n                 $response = $client->count($searchParams);\n                 $stats_elasticsearch['post'] = $response['count'];\n                 $userActionsLogger->logger->info('elasticSearch post = '.$stats_elasticsearch['post']);                \n            } catch (Exception $e) {\n                 //echo 'Exception re\xe7ue : ',  $e->getMessage(), \"\\n\";\n                 throw $e;\n            }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "match": {\n            "title": "Cardiomyopathie"\n        }\n    }\n}\n\n$searchParams[\'body\'][\'query\'] = array( "match" => array("title" => "Cardiomyopathie"));\n\n')),(0,r.kt)("h2",{id:"multi_match"},"Multi_match"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "multi_match": {\n            "query": "Cardiomyopathie",\n            "fields": ["title", "content"]\n        }\n    }\n}\n\n$searchParams[\'body\'][\'query\'] = array( "multi_match" => array("query" => "Cardiomyopathie", "fields" => array("title", "content")));\n')),(0,r.kt)("h2",{id:"match_phrase"},"match_phrase"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "query": {\n        "match_phrase": {\n            "title": "Cardiomyopathie"\n        }\n    }\n}\n\n$searchParams[\'body\'][\'query\'] = array( "match_phrase" => array("title" => "Cardiomyopathie"));\n\n')),(0,r.kt)("h2",{id:"searching-with-query-dsl---term-level-queries"},"Searching with Query DSL - Term level queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_fr/video/_search\n{\n    "query": {\n        "terms": {\n            "speaker": ["bejamin", "yi"]\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"suggestion"},"suggestion"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'GET /medflixs_en/video/_search\n{\n    "suggest": {\n        "autocomplete": {\n            "text": "benjamon",\n            "term": {\n                "field": "speaker"\n            }\n        }\n    },\n    "size": 0\n}\n')))}p.isMDXComponent=!0}}]);