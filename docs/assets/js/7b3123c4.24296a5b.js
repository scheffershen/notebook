"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[92470],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),o=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=o(e.components);return a.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=o(t),m=r,g=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var o=2;o<l;o++)s[o]=t[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},24435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var a=t(87462),r=(t(67294),t(3905));const l={},s="PHP yield les g\xe9n\xe9rateurs",i={unversionedId:"PHP/Snippets/PHP yield les generateurs",id:"PHP/Snippets/PHP yield les generateurs",title:"PHP yield les g\xe9n\xe9rateurs",description:"http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/",source:"@site/docs/PHP/Snippets/PHP yield les generateurs.md",sourceDirName:"PHP/Snippets",slug:"/PHP/Snippets/PHP yield les generateurs",permalink:"/notebook/docs/PHP/Snippets/PHP yield les generateurs",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/PHP/Snippets/PHP yield les generateurs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Close ALL open HTML tags in PHP string",permalink:"/notebook/docs/PHP/Snippets/Close ALL open HTML tags in PHP string"},next:{title:"Behat",permalink:"/notebook/docs/PHP/Tests/Behat/"}},u={},o=[],c={toc:o};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"php-yield-les-g\xe9n\xe9rateurs"},"PHP yield les g\xe9n\xe9rateurs"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/"},"http://mcamuzat.github.io/blog/2015/09/06/php-yield-les-generateurs/")),(0,r.kt)("p",null,"Nous allons voir une nouveaut\xe9 de PHP 5.5 l\u2019instruction yield"),(0,r.kt)("p",null,"Cela permet de mettre en place ce qu\u2019on appelle les g\xe9n\xe9rateurs."),(0,r.kt)("p",null,"##Un premier exemple"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'\nfunction generateAnimal() {\n    echo "Je suis dans le g\xe9n\xe9rateur\\n";\n    yield "Panda";\n    echo "Je suis retourn\xe9 dans le g\xe9n\xe9rateur\\n";\n    yield "Lama";\n    echo "je suis de retour\\n";\n    yield "Alpaga";\n    echo "plus de d\'animaux\\n";\n}\n\n$generator = generateAnimal();\nforeach ($generator as $value) {\n    echo "j\'ai re\xe7u $value \\n";\n}\n//j\'ai re\xe7u Panda \n//Je suis retourn\xe9 dans le g\xe9n\xe9rateur\n//j\'ai re\xe7u Lama\n//je suis de retour\n//j\'ai re\xe7u Alpaga \n//plus de d\'animaux\n')),(0,r.kt)("p",null,"D\u2019abord un g\xe9n\xe9rateur se comporte comme un iterator. C\u2019est gr\xe2ce \xe0 cela que je peux faire un foreach."),(0,r.kt)("p",null,"##premier passage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function generateAnimal() {\n    echo "Je suis dans le g\xe9n\xe9rateur\\n";\n    yield "Panda"; // Je retourne ici \n        echo "Je suis retourn\xe9 dans le g\xe9n\xe9rateur\\n";\n    yield "Lama";\n        echo "je suis de retour\\n";\n    yield "Alpaga";\n    echo "plus de d\'animaux\\n";\n}\n\n\n$generator = generateAnimal();\n\necho $generator->current();\n// "je suis dans le g\xe9n\xe9rateur\n// $value = "Panda"\n')),(0,r.kt)("p",null,"##It\xe9ration suivante"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function generateAnimal() {\n    echo "Je suis dans le g\xe9n\xe9rateur\\n";\n    yield "Panda"; // Je suis reste ici .. je continue \n    echo "Je suis retourn\xe9 dans le g\xe9n\xe9rateur\\n";\n    yield "Lama"; // je m\'arrete \xe0 nouveau \n    echo "je suis de retour\\n";\n    yield "Alpaga";\n    echo "plus d\'animaux\\n";\n}\n\n\n$generator->next() // On r\xe9cup\xe8re la valeur suivante\necho $generator->current();\n// "je suis retourn\xe9 dans le g\xe9n\xe9rateur\n// "Lama"\n')),(0,r.kt)("p",null,"##Troisi\xe8me it\xe9ration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function generateAnimal() {\n    echo "Je suis dans le g\xe9n\xe9rateur\\n";\n    yield "Panda";\n    echo "Je suis retourn\xe9 dans le g\xe9n\xe9rateur\\n";\n    yield "Lama"; // je me suis arr\xe9t\xe9 ici \n    echo "je suis de retour\\n";\n    yield "Alpaga"; // je retourne .. \n    echo "plus d\'animaux\\n";\n}\n\n\n$generator->next() // On r\xe9cup\xe8re la valeur suivante\necho $generator->current();\n// Je suis de retour\n// "Alpaga"\n')),(0,r.kt)("p",null,"##Derni\xe8re It\xe9ration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function generateAnimal() {\n    echo "Je suis dans le g\xe9n\xe9rateur\\n";\n    yield "Panda";\n    echo "Je suis retourn\xe9 dans le g\xe9n\xe9rateur\\n";\n    yield "Lama";\n    echo "je suis de retour\\n";\n    yield "Alpaga"; // je me suis arr\xe9te ici\n    echo "plus d\'animaux\\n"; //pas de yield je renvoie null..\n}\n\n$generator->next() // On r\xe9cup\xe8re la valeur suivante\necho $generator->current();\n// Plus d\'animaux \n// il n\'y a rien car echo null;\n')),(0,r.kt)("p",null,"Une fois qu\u2019un g\xe9n\xe9rateur a fini, on ne peux le r\xe9utiliser"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"foreach ($generator as $value) {\n    echo \"j'ai re\xe7u $value \\n\";\n}\n// PHP Fatal error:  Uncaught exception 'Exception' with message 'Cannot traverse an already closed generator' in /home/marc/yield.php:16\n\n")),(0,r.kt)("p",null,"##Quel est l\u2019int\xe9r\xeat ?"),(0,r.kt)("p",null,"Admettons que je veux faire un foreach sur un tableau d\u2019un millions de lignes."),(0,r.kt)("p",null,"Pour faire un Array de 1 Million de valeurs ce n\u2019est pas tr\xe8s compliqu\xe9. Une instruction suffit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"range(1000000) = [1,2,3,4,...,1000000];\n")),(0,r.kt)("p",null,"Mais cela prend un peu de m\xe9moire. Utilisons notre g\xe9n\xe9rateur de mani\xe8re sympathique"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function xrange($min, $max) {\n  for ($i = $min; $i < $max; $i++) yield $i;\n}\n\nforeach (xrange(1,1000000) as $value) {\n   echo $value;\n}\n")),(0,r.kt)("p",null,"l\u2019\xe9norme avantage est que je n\u2019ai pas besoin de g\xe9n\xe9rer un array de 1 Millions de lignes, je g\xe9n\xe8re valeur par valeur."),(0,r.kt)("p",null,"##Un exemple encore plus concret"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function getLinesFromFile($fileName) {\n    if (!$fileHandle = fopen($fileName, 'r')) {\n        throw new RuntimeException('Impossible d\\'ouvrir le fichier : \"' . $fileName . '\"');\n    }\n\n    while (false !== $line = fgets($fileHandle)) {\n        yield $line;\n    }\n\n    fclose($fileHandle);\n}\n\n$lines = getLinesFromFile($fileName);\nforeach ($lines as $line) {\n    // do something with $line\n}\n")),(0,r.kt)("p",null,"Ce code a plusieurs avantages."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"On va chercher la ligne \xe0 la demande."),(0,r.kt)("li",{parentName:"ul"},"Il y a une couche d\u2019abstraction entre la lecture et le programme principale.")),(0,r.kt)("p",null,"##Un petit quizz"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'function mystere() {\n    $last = 0;\n    $current = 1;\n    yield 1;\n    while (true) {\n        list($current, $last) = array($current + $last, $current);\n        yield $current;\n    }\n}\n\n$count = 0;\nforeach (mystere() as $value) {\n    $count++;\n    echo $value . "\\n";\n    if ($count > 10) {\n        break;\n        // pas cool la boucle infinie\n    }\n}\n')),(0,r.kt)("p",null,"##En conclusion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def countdown(n):\n    while n > 0:\n        yield n\n        n -= 1\n\nfor x in countdown(10):\n    print 'depart dans %s' % x\n\n")),(0,r.kt)("p",null,"##Yield PHP Co-routine"),(0,r.kt)("p",null,"Mais il y a mieux ! On peux envoyer des valeurs dans le g\xe9n\xe9rateur"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function generateAnimal() {\n    $input = (yield 'Panda');\n    var_dump(\"j'ai re\xe7u $input\");\n    $input = (yield 'Lama');\n    var_dump(\"j'ai re\xe7u $input\");\n}\n\n$gen = generateAnimal();\nvar_dump($gen->current());// string(5) \"Panda\"\nvar_dump($gen->send('Canard'));//string(16) \"j'ai recu Canard\"\n                               //string(4) \"Lama\"\nvar_dump($gen->send('Poney')); // j'ai recus Poney.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"            $post = new Coroutine($this->elasticSearchStats('post'));\n            $twitter = new Coroutine($this->elasticSearchStats('twitter'));\n            $total_drugs = new Coroutine($this->intelStats('total_drugs'));\n            $total_dcis = new Coroutine($this->intelStats('total_dcis'));\n            $total_sources = new Coroutine($this->intelStats('total_sources'));\n            $post_valid = new Coroutine($this->intelStats('post_valid'));\n            $tweet = new Coroutine($this->intelStats('tweet'));             \n            $post_adverse_event = new Coroutine($this->intelStats('post_adverse_event'));            \n            $post_indication= new Coroutine($this->intelStats('post_indication'));\n\n            $stats_elasticsearch[\"post\"] = $post->wait();\n            $stats_elasticsearch[\"twitter\"] = $twitter->wait();\n            $stats_intel['total_drugs'] = $total_drugs->wait();\n            $stats_intel['total_dcis'] = $total_dcis->wait();\n            $stats_intel['total_sources'] = $total_sources->wait();\n            $stats_intel['post_valid'] = $post_valid->wait();\n            $stats_intel['tweet'] = $tweet->wait();\n            $stats_intel['post_adverse_event'] = $post_adverse_event->wait();\n            $stats_intel['post_indication'] = $post_indication->wait();\n\n            Loop\\Run();\n\n    /**\n     *  get elasticSeach stats\n     */\n    public function elasticSearchStats($type = \"post\")\n    {\n                    // get total post\n            $stats_elasticsearch = 0;\n            $hosts = [\n                'http://es_admin:3i8ph9@151.80.217.138:9200'\n            ];   \n\n            // elastic Search client\n            $client = \\Elasticsearch\\ClientBuilder::create()->setHosts($hosts)->build();\n\n            $searchParams = []; \n            $searchParams['index'] = 'inteldata_db';\n            $searchParams['type'] = $type;\n\n            $searchParams['body']['query'] = array( \"match_all\" => array());\n\n             $response = $client->count($searchParams);\n             $stats_elasticsearch = $response['count'];\n\n            yield Awaitable\\resolve($stats_elasticsearch);\n\n    }\n    \n    public function intelStats($type =\"total_drugs\") \n    {\n        \n        $em = $this->getDoctrine()->getManager();\n\n        switch ($type) {\n            case 'total_drugs':\n                $stats_intel = $em->createQuery('SELECT COUNT(D) FROM AdminBundle:Drug D  WHERE D.open = 1 AND D.id > 1248')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult(); \n                break;\n            case 'total_dcis':\n                $stats_intel = $em->createQuery('SELECT COUNT(D) FROM AdminBundle:Dci D')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult(); \n                break;\n            case 'total_sources':\n                $stats_intel = $em->createQuery('SELECT COUNT(S) FROM AdminBundle:Source S')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult();\n                break;    \n            case 'post_valid':\n                $stats_intel = $em->createQuery('SELECT COUNT(P) FROM AdminBundle:Post P WHERE P.valid = 1')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult();                  \n                break;   \n            case 'tweet':\n                $stats_intel = $em->createQuery('SELECT COUNT(T) FROM AdminBundle:Tweet T ')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult(); \n                break;   \n            case 'post_adverse_event':\n                $stats_intel = $em->createQuery('SELECT COUNT(AE) FROM AdminBundle:PostAdverseEvent AE')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult();  \n                break;   \n            case 'post_indication':\n                $stats_intel = $em->createQuery('SELECT COUNT(I) FROM AdminBundle:PostUse I')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult(); \n                break;                                                                   \n            default:\n                $stats_intel = $em->createQuery('SELECT COUNT(D) FROM AdminBundle:Drug D  WHERE D.open = 1 AND D.id > 1248')\n                                ->setMaxResults(1)\n                                ->getSingleScalarResult(); \n                break;\n        }\n\n        yield Awaitable\\resolve($stats_intel);                                        \n    }            \n")))}p.isMDXComponent=!0}}]);