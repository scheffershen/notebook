"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[96444],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||i;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},33451:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={},o="Setting up HLS live streaming server using NGINX + nginx-rtmp-module on Ubuntu (TRY THIS, WITHOUT DOCKER, DOCS OFFICIEL)",l={unversionedId:"Nginx/RTMP/Setting up HLS live streaming server using NGINX nginx-rtmp-module on Ubuntu",id:"Nginx/RTMP/Setting up HLS live streaming server using NGINX nginx-rtmp-module on Ubuntu",title:"Setting up HLS live streaming server using NGINX + nginx-rtmp-module on Ubuntu (TRY THIS, WITHOUT DOCKER, DOCS OFFICIEL)",description:"https://www.youtube.com/watch?v=Y-9kVF6bWr4&t=2s",source:"@site/docs/Nginx/RTMP/Setting up HLS live streaming server using NGINX nginx-rtmp-module on Ubuntu.md",sourceDirName:"Nginx/RTMP",slug:"/Nginx/RTMP/Setting up HLS live streaming server using NGINX nginx-rtmp-module on Ubuntu",permalink:"/notebook/docs/Nginx/RTMP/Setting up HLS live streaming server using NGINX nginx-rtmp-module on Ubuntu",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Nginx/RTMP/Setting up HLS live streaming server using NGINX nginx-rtmp-module on Ubuntu.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Re-Stream to Twitch, YouTube, etc - Self Hosted RTMP ( LINUX / DOCKER SERVER)",permalink:"/notebook/docs/Nginx/RTMP/Self Hosted RTMP"},next:{title:"default_conf",permalink:"/notebook/docs/Nginx/RTMP/etc_nginx/site-available/default_conf"}},s={},p=[{value:"1. Compile nginx with rtmp module",id:"1-compile-nginx-with-rtmp-module",level:2},{value:"2. Create nginx configuration file",id:"2-create-nginx-configuration-file",level:2},{value:"3. Start nginx",id:"3-start-nginx",level:2},{value:"4. Pushing live stream to nginx using rtmp",id:"4-pushing-live-stream-to-nginx-using-rtmp",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setting-up-hls-live-streaming-server-using-nginx--nginx-rtmp-module-on-ubuntu-try-this-without-docker-docs-officiel"},"Setting up HLS live streaming server using NGINX + nginx-rtmp-module on Ubuntu (TRY THIS, WITHOUT DOCKER, DOCS OFFICIEL)"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=Y-9kVF6bWr4&t=2s"},"https://www.youtube.com/watch?v=Y-9kVF6bWr4&t=2s"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.peer5.com/guides/setting-up-hls-live-streaming-server-using-nginx/"},"https://docs.peer5.com/guides/setting-up-hls-live-streaming-server-using-nginx/"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/sergey-dryabzhinsky/nginx-rtmp-module"},"https://github.com/sergey-dryabzhinsky/nginx-rtmp-module")),(0,a.kt)("p",null,"This guide will explain how to setup your own streaming server on ubuntu."),(0,a.kt)("h2",{id:"1-compile-nginx-with-rtmp-module"},"1. Compile nginx with rtmp module"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git clone https://github.com/sergey-dryabzhinsky/nginx-rtmp-module.git\n$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev\n$ sudo apt-get install zlib1g zlib1g-dev\n$ wget http://nginx.org/download/nginx-1.18.0.tar.gz\n$ tar -xf nginx-1.18.0.tar.gz\n$ cd nginx-1.18.0\n$ ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-http_ssl_module --add-module=../nginx-rtmp-module\n$ make -j 1  #with the amount of cpu's on your computer \n$ sudo make install\n")),(0,a.kt)("h2",{id:"2-create-nginx-configuration-file"},"2. Create nginx configuration file"),(0,a.kt)("p",null,"an rtmp endpoint Basic uri syntax: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"rtmp://nginx_host[:nginx_port]/<app_name>/<stream_name>\nrtmp://localhost/show/stream == http://localhost:8080/hls/stream.m3u8\n")),(0,a.kt)("p",null,"For good HLS experience we recommend using 3 seconds fragments with 60 seconds playlist. Note that the example points ",(0,a.kt)("em",{parentName:"p"},"/mnt/hls/")," as the target path for the hls playlist and video files. You can change this to a different directory but make sure that ",(0,a.kt)("em",{parentName:"p"},"nginx")," have ",(0,a.kt)("em",{parentName:"p"},"write permissions"),"."),(0,a.kt)("p",null,"rtmp module config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"rtmp {\n    server {\n        listen 1935; # Listen on standard RTMP port\n        chunk_size 4000;\n\n        application show {\n            live on;\n            # Turn on HLS\n            hls on;\n            hls_path /mnt/hls/;\n            hls_fragment 3;\n            hls_playlist_length 60;\n            # disable consuming the stream from nginx as rtmp\n            deny play all;\n        }\n    }\n}\n")),(0,a.kt)("p",null,"http server config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"server {\n    listen 8080;\n\n    location /hls {\n        # Disable cache\n        add_header Cache-Control no-cache;\n\n        # CORS setup\n        add_header 'Access-Control-Allow-Origin' '*' always;\n        add_header 'Access-Control-Expose-Headers' 'Content-Length';\n\n        # allow CORS preflight requests\n        if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain charset=UTF-8';\n            add_header 'Content-Length' 0;\n            return 204;\n        }\n\n        types {\n            application/vnd.apple.mpegurl m3u8;\n            video/mp2t ts;\n        }\n\n        root /mnt/;\n    }\n}\n")),(0,a.kt)("p",null,"Since ",(0,a.kt)("em",{parentName:"p"},"HLS")," consists of static files, a simple http server can be set up with two additions, correct ",(0,a.kt)("em",{parentName:"p"},"MIME types")," and ",(0,a.kt)("em",{parentName:"p"},"CORS headers"),"."),(0,a.kt)("p",null,"the complete nginx.conf"),(0,a.kt)("p",null,"/usr/local/nginx/conf/nginx.conf or /etc/nginx/nginx.conf"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"worker_processes  auto;\nevents {\n    worker_connections  1024;\n}\n\n# RTMP configuration\nrtmp {\n    server {\n        listen 1935; # Listen on standard RTMP port\n        chunk_size 4000;\n\n        application show {\n            live on;\n            # Turn on HLS\n            hls on;\n            hls_path /mnt/hls/;\n            hls_fragment 3;\n            hls_playlist_length 60;\n            # disable consuming the stream from nginx as rtmp\n            deny play all;\n        }\n    }\n}\n\nserver {\n    listen 8080;\n\n    location /hls {\n        # Disable cache\n        add_header Cache-Control no-cache;\n\n        # CORS setup\n        add_header 'Access-Control-Allow-Origin' '*' always;\n        add_header 'Access-Control-Expose-Headers' 'Content-Length';\n\n        # allow CORS preflight requests\n        if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain charset=UTF-8';\n            add_header 'Content-Length' 0;\n            return 204;\n        }\n\n        types {\n            application/vnd.apple.mpegurl m3u8;\n            video/mp2t ts;\n        }\n\n        root /mnt/;\n    }\n}\n")),(0,a.kt)("h2",{id:"3-start-nginx"},"3. Start nginx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ /usr/local/nginx/sbin/nginx -t\n$ /usr/local/nginx/sbin/nginx\n$ /usr/local/nginx/sbin/nginx -g 'daemon off;'\n$ /usr/local/nginx/sbin/nginx -t && nginx -s reload\n$ /usr/local/nginx/sbin/nginx -s stop\n$ sudo add-apt-repository ppa:mc3man/trusty-media\n$ sudo apt-get update\n$ sudo apt-get install ffmpeg\n")),(0,a.kt)("h2",{id:"4-pushing-live-stream-to-nginx-using-rtmp"},"4. Pushing live stream to nginx using rtmp"),(0,a.kt)("p",null,"option 1: "),(0,a.kt)("p",null,"nginx accepts rtmp stream as input"),(0,a.kt)("p",null,"HLS stream\nvideo codec: x264\naudio codec: aac/mp3/ac3"),(0,a.kt)("p",null,"if you have an existing rtmp stream in the correct codec, you can skip ",(0,a.kt)("em",{parentName:"p"},"ffmpeg")," and tell nginx to pull the stream directly"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"application show {\n    live on;\n    pull rtmp://example.com:4567/sports/channel3 live=1;\n    # to change the local stream name use this syntax: ... live=1 name=ch3; \n\n    # other directives...\n    # hls_...\n}\n")),(0,a.kt)("p",null,"option 2: "),(0,a.kt)("p",null,"To achieve the stream encoding and muxing, Update localhost to your nginx server ip/domain"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ffmpeg -re -f video4linux2 -i /dev/video0 -vcodec libx264 -vprofile baseline -acodec aac -strict -2 -f flv rtmp://localhost/show/stream\n")),(0,a.kt)("p",null,"-re - consume stream on media's native bitrate (and not as fast as possible)\n-f - use video4linux2 plugin",(0,a.kt)("br",{parentName:"p"}),"\n","-i - select physical device to capture from\n-vcodec - specify video codec to output\n-vprofile - use x264 baseline profile\n-acodec - use aac audio codec\n-strict - allow using the experimental aac codec\n-f - specify format to output\n",(0,a.kt)("em",{parentName:"p"},"rtmp://localhost/show/stream")," - rtmp endpoint to stream to. if the target port is not 1935 is should be included in the uri. The last path component is the ",(0,a.kt)("em",{parentName:"p"},"stream name")," - that means that multiple channels can be pushed using different names"),(0,a.kt)("p",null,"option 3: "),(0,a.kt)("p",null,"Stream file example-vid.mp4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," $ ffmpeg -re -i example-vid.mp4 -vcodec libx264 -vprofile baseline -g 30 -acodec aac -strict -2 -f flv rtmp://localhost/show/stream\n")),(0,a.kt)("p",null,"option 4:"),(0,a.kt)("p",null,"Stream another rtmp stream"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," $ ffmpeg -i rtmp://example.com/appname/streamname -vcodec libx264 -vprofile baseline -acodec aac -strict -2 -f flv rtmp://localhost/show/stream\n")),(0,a.kt)("p",null,"Now that we are pushing our stream into nginx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"http://localhost:8080/hls/stream.m3u8\n")))}u.isMDXComponent=!0}}]);