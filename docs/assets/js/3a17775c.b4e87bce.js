"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[70218],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,m=d["".concat(l,".").concat(u)]||d[u]||f[u]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},18968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={},o="Difference between this and self in JavaScript",s={unversionedId:"Javascript/Difference-between-this-and-self-in-JavaScript",id:"Javascript/Difference-between-this-and-self-in-JavaScript",title:"Difference between this and self in JavaScript",description:"Sommaire",source:"@site/docs/Javascript/Difference-between-this-and-self-in-JavaScript.md",sourceDirName:"Javascript",slug:"/Javascript/Difference-between-this-and-self-in-JavaScript",permalink:"/notebook/docs/Javascript/Difference-between-this-and-self-in-JavaScript",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Javascript/Difference-between-this-and-self-in-JavaScript.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Javascript Roadmap",permalink:"/notebook/docs/Javascript/Javascript Roadmap"},next:{title:"JavaScript Modules: A Beginner\u2019s Guide",permalink:"/notebook/docs/Javascript/JavaScript-Modules-A-Beginner-s-Guide"}},l={},c=[{value:"Sommaire",id:"sommaire",level:2},{value:"<code>self</code> vs <code>window</code>",id:"self-vs-window",level:2},{value:"Context in Javascript: Self vs. This",id:"context-in-javascript-self-vs-this",level:2},{value:"The JavaScript call() Method",id:"the-javascript-call-method",level:2},{value:"Resources",id:"resources",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"difference-between-this-and-self-in-javascript"},"Difference between this and self in JavaScript"),(0,i.kt)("h2",{id:"sommaire"},"Sommaire"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#self-vs-window"},(0,i.kt)("inlineCode",{parentName:"a"},"self")," vs ",(0,i.kt)("inlineCode",{parentName:"a"},"window"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#context-in-javascript-self-vs-this"},"Context in Javascript: Self vs This")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#the-javascript-call-method"},"The Javascript call() Method"))),(0,i.kt)("h2",{id:"self-vs-window"},(0,i.kt)("inlineCode",{parentName:"h2"},"self")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"window")),(0,i.kt)("p",null,"Unless set elsewhere, the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"window")),(0,i.kt)("p",null,"If you're using a function that is executed in the global scope and is not in strict mode, ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"window")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"window.self === window; // true\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function foo() {\n    console.log(\n        window.self === window, // is self window?\n        window.self === this,   // is self this?\n        this === window         // is this window?\n    );\n}\nfoo(); // true true true\n")),(0,i.kt)("p",null,"If you're using a function in a different context, ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," will refer to that context, but ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," will still be ",(0,i.kt)("inlineCode",{parentName:"p"},"window"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// invoke foo with context {}\nfoo.call({}); // true false false\n")),(0,i.kt)("h2",{id:"context-in-javascript-self-vs-this"},"Context in Javascript: Self vs. This"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"this")," is a keyword. It is used to refer to an object in which a method is called. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let obj = { \n    myMethod: function() {console.log(this.x)},\n    x: 10\n}\n\nobj.myMethod() // 10 \n")),(0,i.kt)("p",null,"However ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," can lose its scope easily. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let obj = { \n    myMethod: function() {console.log(this.x)},\n    x: 10\n}\nlet m = obj.myMethod\n\nm() // undefined\n")),(0,i.kt)("p",null,"This is because ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," default is window. a global object"),(0,i.kt)("p",null,"Another use for ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," is in an object constructor. In one, ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," refers to an object being made, or myPoint in the example below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function Point() {\n    this.x = 1\n    this.y = 3\n}\n\nlet myPoint = new Point()\n\nmyPoint // Point { x: 1, y: 3 }\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"self")," is an identifier, It has no special syntactic meaning. Browsers define ",(0,i.kt)("inlineCode",{parentName:"p"},"window.self")," as window. Self can be redefined within an enclosing scope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function foo() {\n    console.log(\n        window.self === window, // is self window?\n        window.self === this,   // is self this?\n        this === window         // is this window?\n    );\n}\nfoo(); // true true true\n\n// invoke foo with context {}\nfoo.call({}); // true false false\n")),(0,i.kt)("p",null,"When calling a function in the global scope, both ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," defaults to window. However, when not in the global scope, ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," will refer to that context but ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," will still refer to window."),(0,i.kt)("h2",{id:"the-javascript-call-method"},"The JavaScript call() Method"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"call()")," method is a predefined JavaScript method. It can be used to invoke (call) a method with an owner object as an argument (parameter)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var person = {\n  fullName: function() {\n    return this.firstName + " " + this.lastName;\n  }\n}\nvar person1 = {\n  firstName:"John",\n  lastName: "Doe"\n}\nperson.fullName.call(person1);  // Will return "John Doe"\n')),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/16875767/difference-between-this-and-self-in-javascript/38549303"},"https://stackoverflow.com/questions/16875767/difference-between-this-and-self-in-javascript/38549303"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://jacksongrowson.medium.com/context-in-javascript-self-vs-this-f375826c9a95"},"https://jacksongrowson.medium.com/context-in-javascript-self-vs-this-f375826c9a95")))}d.isMDXComponent=!0}}]);