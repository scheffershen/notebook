"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[75357],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),l=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(t),h=r,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||s;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=h;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},82364:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(87462),r=(t(67294),t(3905));const s={},o="lexik/jwt-authentication-bundle",i={unversionedId:"Symfony/Bundles/jwt-Authentication-Bundle",id:"Symfony/Bundles/jwt-Authentication-Bundle",title:"lexik/jwt-authentication-bundle",description:"Projects",source:"@site/docs/Symfony/Bundles/jwt-Authentication-Bundle.md",sourceDirName:"Symfony/Bundles",slug:"/Symfony/Bundles/jwt-Authentication-Bundle",permalink:"/notebook/docs/Symfony/Bundles/jwt-Authentication-Bundle",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Symfony/Bundles/jwt-Authentication-Bundle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dataTable in symfony project",permalink:"/notebook/docs/Symfony/Bundles/SymfonyOpenSourceProjects-DataTable"},next:{title:"Does PHP-CS-Fixer replace or complement PHPCS/PHPCBF?",permalink:"/notebook/docs/Symfony/Code-Quality-Tools/Does PHP-CS-Fixer replace or complement PHPCS-PHPCBF"}},u={},l=[{value:"Projects",id:"projects",level:2},{value:"Configure JSON Web Token",id:"configure-json-web-token",level:3},{value:"coopcycle-web\features\bootstrapFeatureContext.php:",id:"coopcycle-webfeaturesbootstrapfeaturecontextphp",level:2}],c={toc:l};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lexikjwt-authentication-bundle"},"lexik/jwt-authentication-bundle"),(0,r.kt)("h2",{id:"projects"},"Projects"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"acmepodcast"),(0,r.kt)("li",{parentName:"ul"},"documentManager"),(0,r.kt)("li",{parentName:"ul"},"omed"),(0,r.kt)("li",{parentName:"ul"},"services"),(0,r.kt)("li",{parentName:"ul"},"symfony-react-sandbox"),(0,r.kt)("li",{parentName:"ul"},"symfony4APIBoilerplateJWTBook")),(0,r.kt)("p",null,'"gesdinet/jwt-refresh-token-bundle": "Implements a refresh token system over Json Web Tokens in Symfony",'),(0,r.kt)("p",null,'"lcobucci/jwt": "For using the LcobucciJWTEncoder",'),(0,r.kt)("p",null,'"spomky-labs/lexik-jose-bridge": "Provides a JWT Token encoder with encryption support"'),(0,r.kt)("h3",{id:"configure-json-web-token"},"Configure JSON Web Token"),(0,r.kt)("p",null,"version coopcycle-web"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mkdir -p var/jwt\nopenssl genrsa -out var/jwt/private.pem 4096\nopenssl rsa -pubout -in var/jwt/private.pem -out var/jwt/public.pem\n\nmkdir -p var/jwt\nopenssl genrsa -out var/jwt/private.pem -passout pass:coursiers -aes256 4096;\nopenssl rsa -pubout -passin pass:coursiers -in var/jwt/private.pem -out var/jwt/public.pem\n")),(0,r.kt)("p",null,"##new Lexik\\Bundle\\JWTAuthenticationBundle\\LexikJWTAuthenticationBundle(),"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"new Gesdinet\\JWTRefreshTokenBundle\\GesdinetJWTRefreshTokenBundle(),")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-config.yml"},'lexik_jwt_authentication:\n    private_key_path: "%jwt_private_key_path%"\n    public_key_path:  "%jwt_public_key_path%"\n    pass_phrase:      "%jwt_key_pass_phrase%"\n    token_ttl:        "%jwt_token_ttl%"\n    token_extractors:\n        authorization_header:      # look for a token as Authorization Header\n            enabled: true\n            prefix:  Bearer\n            name:    Authorization\n        query_parameter:           # check token in query string parameter\n            enabled: true\n            name:    token\n\ngesdinet_jwt_refresh_token:\n    user_provider: fos_user.user_provider.username_email            \n')),(0,r.kt)("p",null,"version omed (symfony 4)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lexik_jwt_authentication.yaml"},"lexik_jwt_authentication:\n    private_key_path: '%kernel.project_dir%/%env(resolve:JWT_PRIVATE_KEY_PATH)%'\n    public_key_path:  '%kernel.project_dir%/%env(resolve:JWT_PUBLIC_KEY_PATH)%'\n    pass_phrase:      '%env(resolve:JWT_PASSPHRASE)%'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-parameters.yml"},"jwt_private_key_path: %kernel.root_dir%/../var/jwt/private.pem   \njwt_public_key_path:  %kernel.root_dir%/../var/jwt/public.pem    \njwt_key_pass_phrase:  'coursiers'                                \njwt_token_ttl:        86400\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-router.yml"},"gesdinet_jwt_refresh_token:\n    path:     /api/token/refresh\n    defaults: { _controller: gesdinet.jwtrefreshtoken:refresh }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-security.yml"},"    firewalls:\n        # disables authentication for assets and the profiler, adapt it according to your needs\n        dev:\n            pattern: ^/(_(profiler|wdt)|css|images|js)/\n            security: false\n\n        api_login:\n            pattern:  ^/api/login\n            stateless: true\n            anonymous: true\n            form_login:\n                check_path:               /api/login_check\n                success_handler:          lexik_jwt_authentication.handler.authentication_success\n                failure_handler:          lexik_jwt_authentication.handler.authentication_failure\n                require_previous_session: false\n\n        api_orders:\n            pattern:   ^/api/orders\n            stateless: true\n            guard:\n                authenticators:\n                    - lexik_jwt_authentication.jwt_token_authenticator\n\n        api_deliveries:\n            pattern:   ^/api/deliveries\n            stateless: true\n            guard:\n                authenticators:\n                    - lexik_jwt_authentication.jwt_token_authenticator\n\n        api_me:\n            pattern:   ^/api/me\n            stateless: true\n            guard:\n                authenticators:\n                    - lexik_jwt_authentication.jwt_token_authenticator\n\n        api_tasks:\n            pattern:   ^/api/tasks\n            stateless: true\n            guard:\n                authenticators:\n                    - lexik_jwt_authentication.jwt_token_authenticator\n\n        token_check:\n            pattern:   ^/api/token/check\n            stateless: true\n            guard:\n                authenticators:\n                    - lexik_jwt_authentication.jwt_token_authenticator\n\n        token_refresh:\n            pattern:  ^/api/token/refresh\n            stateless: true\n            anonymous: true\n")),(0,r.kt)("p",null,"version omed (symfony4 + fosUser + api + jwt)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-security.ymal"},"    firewalls:\n        login:\n            pattern:  ^/login\n            stateless: true\n            anonymous: true\n            provider: fos_userbundle\n            json_login:\n                check_path: /login_check\n                username_path: username\n                password_path: password\n                success_handler: lexik_jwt_authentication.handler.authentication_success\n                failure_handler: lexik_jwt_authentication.handler.authentication_failure\n                require_previous_session: false\n        main:\n            pattern:      ^/api\n            provider:     fos_userbundle\n            stateless:    true\n            anonymous:    ~\n            guard:\n                authenticators:\n                    - lexik_jwt_authentication.jwt_token_authenticator\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"lexik_jwt_authentication.handler.authentication_success"),(0,r.kt)("li",{parentName:"ul"},"lexik_jwt_authentication.handler.authentication_failure"),(0,r.kt)("li",{parentName:"ul"},"lexik_jwt_authentication.jwt_token_authenticator")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Encoder\\JWTEncoderInterface;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\TokenExtractor\\AuthorizationHeaderTokenExtractor;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Event\\AuthenticationSuccessEvent;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Events;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Response\\JWTAuthenticationSuccessResponse;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTManager;"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-services.yml"},"services:\n  my.jwt_listener:\n    class: AppBundle\\EventListener\\JwtListener\n    tags:\n      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccess }\n")),(0,r.kt)("p",null,"version omed "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-services.yml"},"services:\n    lexik_jwt_authentication.jwt_manager:\n        class:  Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTManager\n        public: true\n")),(0,r.kt)("h2",{id:"coopcycle-webfeaturesbootstrapfeaturecontextphp"},"coopcycle-web\\features\\bootstrap\\FeatureContext.php:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"\n/**\n * Defines application features from the specific context.\n */\nclass FeatureContext implements Context, SnippetAcceptingContext, KernelAwareContext\n{\n\n    /**\n     * Initializes context.\n     *\n     * Every scenario gets its own context instance.\n     * You can also pass arbitrary arguments to the\n     * context constructor through behat.yml.\n     */\n    public function __construct(\n        ManagerRegistry $doctrine,\n        HttpCallResultPool $httpCallResultPool,\n        \\libphonenumber\\PhoneNumberUtil $phoneNumberUtil\n    )\n    {\n        $this->tokens = [];\n        $this->doctrine = $doctrine;\n        $this->manager = $doctrine->getManager();\n        $this->schemaTool = new SchemaTool($this->manager);\n        $this->classes = $this->manager->getMetadataFactory()->getAllMetadata();\n        $this->httpCallResultPool = $httpCallResultPool;\n        $this->phoneNumberUtil = $phoneNumberUtil;\n    }    \n    /**\n     * @Given the user :username is authenticated\n     */\n    public function theUserIsAuthenticated($username)\n    {\n        $userManager = $this->getContainer()->get('fos_user.user_manager');\n        $jwtManager = $this->getContainer()->get('lexik_jwt_authentication.jwt_manager');\n\n        $user = $userManager->findUserByUsername($username);\n        $token = $jwtManager->create($user);\n\n        $this->tokens[$username] = $token;\n    }\n\n    /**\n     * @When I send an authenticated :method request to :url\n     */\n    public function iSendAnAuthenticatedRequestTo($method, $url, PyStringNode $body = null)\n    {\n        $this->restContext->iAddHeaderEqualTo('Authorization', 'Bearer ' . $this->jwt);\n        $this->restContext->iSendARequestTo($method, $url, $body);\n    }    \n\n    /**\n     * @When I send an authenticated :method request to :url with body:\n     */\n    public function iSendAnAuthenticatedRequestToWithBody($method, $url, PyStringNode $body)\n    {\n        $this->restContext->iAddHeaderEqualTo('Authorization', 'Bearer ' . $this->jwt);\n        $this->restContext->iSendARequestTo($method, $url, $body);\n    }    \n")),(0,r.kt)("p",null,"version omed"),(0,r.kt)("p",null,"omed/src/Behat/Contexts/UserContext.php:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTManager;\nclass UserContext implements Context\n{\n    public function __construct(ManagerRegistry $doctrine, JWTManager $jwtManager)\n    {\n        $this->entityManager = $doctrine->getManagerForClass(User::class);\n        $this->userRepository = $this->entityManager->getRepository(User::class);\n        $this->jwtManager = $jwtManager;\n    }\n    /**\n     * @param User $user\n     */\n    public function login(User $user)\n    {\n        $token = $this->jwtManager->create($user);\n        $this->restContext->iAddHeaderEqualTo('Authorization', \"Bearer $token\");\n    }\n")),(0,r.kt)("p",null,"##coopcycle-web/src/AppBundle/Action/Register.php:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Event\\AuthenticationSuccessEvent;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Events;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Response\\JWTAuthenticationSuccessResponse;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTManager;\n\nclass Register\n{\n    private $userManipulator;\n    private $jwtManager;\n    private $dispatcher;\n\n    public function __construct(\n        UserManipulator $userManipulator,\n        UserManagerInterface $userManager,\n        JWTManager $jwtManager,\n        EventDispatcherInterface $dispatcher,\n        FormFactory $formFactory\n    )\n    {\n        $this->userManipulator = $userManipulator;\n        $this->jwtManager = $jwtManager;\n        $this->dispatcher = $dispatcher;\n        $this->formFactory = $formFactory;\n        $this->userManager = $userManager;\n    }\n\n    /**\n     * @Route(\n     *     path=\"/register\",\n     *     name=\"api_register\"\n     * )\n     * @Method(\"POST\")\n     */\n    public function registerAction(Request $request)\n    {\n        $email = $request->request->get('_email');\n        $username = $request->request->get('_username');\n        $password = $request->request->get('_password');\n        $telephone = $request->request->get('_telephone');\n        $givenName = $request->request->get('_givenName');\n        $familyName = $request->request->get('_familyName');\n\n        $data = [\n            'email' => $email,\n            'username' => $username,\n            'plainPassword' => [\n                'password' => $password,\n                'password_confirmation' => $password\n            ],\n            'givenName' => $givenName,\n            'familyName' => $familyName,\n            'telephone' => $telephone\n        ];\n\n        $user = new ApiUser();\n\n        $form = $this->formFactory->create(ApiRegistrationType::class, $user);\n        $form->submit($data);\n\n        if (!$form->isValid()) {\n            $errors = $this->getFormErrorsArray($form);\n            return new JsonResponse($errors, 400);\n        }\n\n        try {\n            // TODO Customize FOSUserBundle manipulator to pass all fields at once\n            $user = $this->userManipulator->create($username, $password, $email, true, false);\n            $jwt = $this->jwtManager->create($user);\n            $user->setTelephone($form->get('telephone')->getData());\n            $user->setGivenName($form->get('givenName')->getData());\n            $user->setFamilyName($form->get('familyName')->getData());\n            $this->userManager->updateUser($user);\n        } catch (\\Exception $e) {\n            // TODO Send JSON-LD response\n            throw new BadRequestHttpException($e);\n        }\n\n        // See Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler\n        $response = new JWTAuthenticationSuccessResponse($jwt);\n        $event    = new AuthenticationSuccessEvent(['token' => $jwt], $user, $response);\n\n        $this->dispatcher->dispatch(Events::AUTHENTICATION_SUCCESS, $event);\n        $response->setData($event->getData());\n\n        return $response;\n    }    \n")),(0,r.kt)("p",null,"version Symfony4APIBoilerplateJWTBook"),(0,r.kt)("p",null,"Symfony4APIBoilerplateJWTBook/src/Controller/Login.php:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\n\nclass LoginController extends Controller\n{\n    /**\n     * @Route(\"/api/token\", name=\"token_authentication\")\n     * @Method(\"POST\")\n     */\n    public function newTokenAction(Request $request): JsonResponse\n    {\n        $user = $this->getDoctrine()->getRepository(User::class)->findOneBy(['username'=> $request->getUser()]);\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        $isValid = $this->get('security.password_encoder')\n            ->isPasswordValid($user, $request->getPassword());\n\n        if (!$isValid) {\n            throw new BadCredentialsException();\n        }\n\n        $token = $this->get('lexik_jwt_authentication.encoder')\n            ->encode([\n                'username' => $user->getUsername(),\n                'exp' => time() + 3600 // 1 hour expiration\n        ]);\n\n        return new JsonResponse(['token' => $token]);\n    }\n")),(0,r.kt)("p",null,"Symfony4APIBoilerplateJWTBook/src/Security/JwtAuthenticator.php:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Encoder\\JWTEncoderInterface;\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\TokenExtractor\\AuthorizationHeaderTokenExtractor;\n\nclass JwtAuthenticator extends AbstractGuardAuthenticator\n{\n    private $em;\n\n    private $jwtEncoder;\n\n    public function __construct(EntityManagerInterface $em, JWTEncoderInterface $jwtEncoder)\n    {\n        $this->em = $em;\n        $this->jwtEncoder = $jwtEncoder;\n    }\n\n    public function getUser($credentials, UserProviderInterface $userProvider)\n    {\n        $data = $this->jwtEncoder->decode($credentials);\n\n        if ($data == false) {\n            throw new CustomUserMessageAuthenticationException('Invalid Token');\n        }\n\n        $username = $data['username'];\n        $user = $this->em->getRepository(User::class)\n                         ->findOneBy(['username' => $username]);\n\n        if (!$user) {\n            throw new AuthenticationCredentialsNotFoundException();\n        }\n\n        return $user;\n    }    \n")),(0,r.kt)("p",null,"##coopcycle-web/src/AppBundle/EventListener/JwtListener.php:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Lexik\\Bundle\\JWTAuthenticationBundle\\Event\\AuthenticationSuccessEvent;\n\nclass JwtListener\n{\n    /**\n     * @param AuthenticationSuccessEvent $event\n     */\n    public function onAuthenticationSuccess(AuthenticationSuccessEvent $event)\n    {\n        $data = $event->getData();\n        $user = $event->getUser();\n\n        if (!$user instanceof UserInterface) {\n            return;\n        }\n\n        $data['roles'] = $user->getRoles();\n        $data['username'] = $user->getUsername();\n        $data['email'] = $user->getEmail();\n        $data['id'] = $user->getId();\n\n        $event->setData($data);\n    }\n} \n")))}p.isMDXComponent=!0}}]);