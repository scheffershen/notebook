"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4202],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i="learn-regex",l={unversionedId:"Regex/learn-regex",id:"Regex/learn-regex",title:"learn-regex",description:"https://github.com/zeeshanu/learn-regex",source:"@site/docs/Regex/learn-regex.md",sourceDirName:"Regex",slug:"/Regex/learn-regex",permalink:"/notebook/docs/Regex/learn-regex",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/Regex/learn-regex.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Regex",permalink:"/notebook/docs/category/regex"},next:{title:"Scorm",permalink:"/notebook/docs/category/scorm"}},p={},s=[{value:"5.2 Global search <code>/g</code>",id:"52-global-search-g",level:3},{value:"5.3 Multiline <code>/m</code>",id:"53-multiline-m",level:3},{value:"Bonus",id:"bonus",level:3}],c={toc:s};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"learn-regex"},"learn-regex"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/zeeshanu/learn-regex"},"https://github.com/zeeshanu/learn-regex")),(0,a.kt)("h3",{id:"52-global-search-g"},"5.2 Global search ",(0,a.kt)("inlineCode",{parentName:"h3"},"/g")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"g")," modifier is used to perform a global match (finds all matches rather than stopping after the first match). For example, the regular expression ",(0,a.kt)("inlineCode",{parentName:"p"},"/.(at)/g")," means: any character except a new line, followed by a lowercase ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),", followed by a lowercase ",(0,a.kt)("inlineCode",{parentName:"p"},"t"),". Because we provided the ",(0,a.kt)("inlineCode",{parentName:"p"},"g")," flag at the end of the regular expression, it will now find all matches in the input string, not just the first one (which is the default behavior)."),(0,a.kt)("p",null,'"/.(at)/" => The ',(0,a.kt)("inlineCode",{parentName:"p"},"fat")," cat sat on the mat."),(0,a.kt)("p",null,'"/.(at)/g" => The ',(0,a.kt)("inlineCode",{parentName:"p"},"fat")," ",(0,a.kt)("inlineCode",{parentName:"p"},"cat")," ",(0,a.kt)("inlineCode",{parentName:"p"},"sat")," on the ",(0,a.kt)("inlineCode",{parentName:"p"},"mat"),"."),(0,a.kt)("h3",{id:"53-multiline-m"},"5.3 Multiline ",(0,a.kt)("inlineCode",{parentName:"h3"},"/m")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," modifier is used to perform a multi-line match. As we discussed earlier, anchors ",(0,a.kt)("inlineCode",{parentName:"p"},"(^, $)")," are used to check if a pattern is at the beginning of the input or the end. But if we want the anchors to work on each line, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," flag. For example, the regular expression ",(0,a.kt)("inlineCode",{parentName:"p"},"/at(.)?$/gm")," means: a lowercase ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),", followed by a lowercase ",(0,a.kt)("inlineCode",{parentName:"p"},"t")," and, optionally, anything except a new line. And because of the ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," flag, the regular expression engine now matches patterns at the end of each line in a string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"/.at(.)?$/" => The fat\n                cat sat\n                on the `mat`.\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"/.at(.)?$/" => The `fat`\n                cat `sat`\n                on the `mat`.\n')),(0,a.kt)("h3",{id:"bonus"},"Bonus"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"* Positive Integers: ^\\d+$\n* Negative Integers: ^-\\d+$\n* US Phone Number: ^+?[\\d\\s]{3,}$\n* US Phone with code: ^+?[\\d\\s]+(?[\\d\\s]{10,}$\n* Integers: ^-?\\d+$\n* Username: ^[\\w\\d_.]{4,16}$\n* Alpha-numeric characters: ^[a-zA-Z0-9]*$\n* Alpha-numeric characters with spaces: ^[a-zA-Z0-9 ]*$\n* Password: ^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$\n* email: ^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$\n* IPv4 address: ^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$\n* Lowercase letters only: ^([a-z])*$\n* Uppercase letters only: ^([A-Z])*$\n* URL: ^(((http|https|ftp):\\/\\/)?([[a-zA-Z0-9]\\-\\.])+(\\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\\/+=%&_\\.~?\\-]*))*$\n* VISA credit card numbers: ^(4[0-9]{12}(?:[0-9]{3})?)*$\n* Date (MM/DD/YYYY): ^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$\n* Date (YYYY/MM/DD): ^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$\n* MasterCard credit card numbers: ^(5[1-5][0-9]{14})*$\n")))}d.isMDXComponent=!0}}]);