"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1159],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={},a="ReadMe",l={unversionedId:"WebAPI/web-rtc/jitsi/ReadMe",id:"WebAPI/web-rtc/jitsi/ReadMe",title:"ReadMe",description:"Jitsi is a set of Open Source projects that allows you to easily build and deploy secure videoconferencing solutions.",source:"@site/docs/WebAPI/web-rtc/jitsi/ReadMe.md",sourceDirName:"WebAPI/web-rtc/jitsi",slug:"/WebAPI/web-rtc/jitsi/",permalink:"/notebook/docs/WebAPI/web-rtc/jitsi/",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/WebAPI/web-rtc/jitsi/ReadMe.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WebRTC",permalink:"/notebook/docs/WebAPI/web-rtc/WebRTC"},next:{title:"mcc3 2015 - easyrtc",permalink:"/notebook/docs/WebAPI/web-rtc/mcc3 - easyrtc"}},s={},c=[{value:"installation",id:"installation",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Images",id:"images",level:2},{value:"Resources",id:"resources",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"readme"},"ReadMe"),(0,o.kt)("p",null,"Jitsi is a set of Open Source projects that allows you to easily build and deploy secure videoconferencing solutions."),(0,o.kt)("p",null,"Jitsi Meet is a fully encrypted, 100% Open Source video conferencing solution that you can use all day, every day, for free \u2014 with no account needed."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"TURN server")," is a media relay/proxy that allows peers to exchange UDP or TCP media traffic whenever one or both parties are behind NAT."),(0,o.kt)("h2",{id:"installation"},"installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ git clone https://github.com/jitsi/docker-jitsi-meet.git\n\n$ cp env.example .env\n\n$ ./gen-passwords.sh\n\n# For linux\n$ mkdir -p ~/.jitsi-meet-cfg/{web,transcripts,prosody/config,prosody/prosody-plugins-custom,jicofo,jvb,jigasi,jibri}\n\n# For Windows\n$ echo web,transcripts,prosody/config,prosody/prosody-plugins-custom,jicofo,jvb,jigasi,jibri | % { mkdir "~/.jitsi-meet-cfg/$_" }\n\n$ docker-compose up -d\n')),(0,o.kt)("p",null,"Access the web UI at ",(0,o.kt)("inlineCode",{parentName:"p"},"https://localhost:8443")),(0,o.kt)("p",null,"If you want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"jigasi")," too, first configure your ",(0,o.kt)("inlineCode",{parentName:"p"},"env")," file with ",(0,o.kt)("inlineCode",{parentName:"p"},"SIP credentials")," and then run Docker Compose as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ docker-compose -f docker-compose.yml -f jigasi.yml up\n")),(0,o.kt)("p",null,"If you want to enable document sharing via ",(0,o.kt)("inlineCode",{parentName:"p"},"Etherpad"),", configure it and run Docker Compose as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ docker-compose -f docker-compose.yml -f etherpad.yml up\n")),(0,o.kt)("p",null,"If you want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"jibri")," too, first configure a host as described in ",(0,o.kt)("inlineCode",{parentName:"p"},"JItsi BRoadcasting")," Infrastructure configuration section and then run Docker Compose as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ docker-compose -f docker-compose.yml -f jibri.yml up -d\n")),(0,o.kt)("p",null,"or to use ",(0,o.kt)("inlineCode",{parentName:"p"},"jigasi")," too:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ docker-compose -f docker-compose.yml -f jigasi.yml -f jibri.yml up -d\n")),(0,o.kt)("h2",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"A Jitsi Meet installation can be broken down into the following components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A web interface"),(0,o.kt)("li",{parentName:"ul"},"An XMPP server"),(0,o.kt)("li",{parentName:"ul"},"A conference focus component"),(0,o.kt)("li",{parentName:"ul"},"A video router (could be more than one)"),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"SIP")," gateway for audio calls"),(0,o.kt)("li",{parentName:"ul"},"A Broadcasting Infrastructure for recording or streaming a conference.")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"SIP")," VoIP gateway is a device that enables a user to place ",(0,o.kt)("inlineCode",{parentName:"p"},"VoIP")," calls using session initiation protocol (SIP). SIP is a telephony technology developed as a fast, easy standard for delivering IP-based voice, data, and video communications."),(0,o.kt)("h2",{id:"images"},"Images"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"base"),": Debian stable base image with the S6 Overlay for process control and the Jitsi repositories enabled. All other images are based on this one."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"base-java"),": Same as the above, plus Java (OpenJDK)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"web"),": Jitsi Meet web UI, served with nginx."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"prosody"),": Prosody, the XMPP server."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jicofo"),": Jicofo, the XMPP focus component."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jvb"),": Jitsi Videobridge, the video router."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jigasi"),": Jigasi, the SIP (audio only) gateway."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jibri"),": Jibri, the broadcasting infrastructure.")),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://jitsi.github.io/handbook"},"https://jitsi.github.io/handbook"))))}u.isMDXComponent=!0}}]);