"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5674],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,h=u["".concat(i,".").concat(d)]||u[d]||m[d]||l;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=d;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5628:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const l={},s="Lynda - Linux Bash Shell and Scripts",o={unversionedId:"BashScript/Lynda - Linux Bash Shell and Scripts",id:"BashScript/Lynda - Linux Bash Shell and Scripts",title:"Lynda - Linux Bash Shell and Scripts",description:"1. Intro to Bash Scripting",source:"@site/docs/BashScript/Lynda - Linux Bash Shell and Scripts.md",sourceDirName:"BashScript",slug:"/BashScript/Lynda - Linux Bash Shell and Scripts",permalink:"/notebook/docs/BashScript/Lynda - Linux Bash Shell and Scripts",draft:!1,editUrl:"https://github.com/scheffershen/notebook/tree/main/docs/BashScript/Lynda - Linux Bash Shell and Scripts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Difference between sh and bash",permalink:"/notebook/docs/BashScript/Difference between sh and bash"},next:{title:"Bash Environment Customization",permalink:"/notebook/docs/BashScript/customizing-bash-environment"}},i={},p=[{value:"1. Intro to Bash Scripting",id:"1-intro-to-bash-scripting",level:2},{value:"2. Variables, Control Structures, and Arithmetic",id:"2-variables-control-structures-and-arithmetic",level:2},{value:"The Case Staement",id:"the-case-staement",level:3},{value:"The If-Then-Else Statement",id:"the-if-then-else-statement",level:3},{value:"Test in Bash",id:"test-in-bash",level:3}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lynda---linux-bash-shell-and-scripts"},"Lynda - Linux Bash Shell and Scripts"),(0,r.kt)("h2",{id:"1-intro-to-bash-scripting"},"1. Intro to Bash Scripting"),(0,r.kt)("p",null,"1.1 man"),(0,r.kt)("p",null,"1.2 shebang"),(0,r.kt)("p",null,"Script File Basic"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First two characters should be #!"),(0,r.kt)("li",{parentName:"ul"},"Followed by path to Bash or env:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"#!/usr/bin/env bash"),(0,r.kt)("li",{parentName:"ul"},"#!/bin/bash"))),(0,r.kt)("li",{parentName:"ul"},"This is executed via the kernel system called execve()."),(0,r.kt)("li",{parentName:"ul"},"Kernel checks for #! and passes the path to the original program as a command-line argument."),(0,r.kt)("li",{parentName:"ul"},"The env will look for Bash in your path.")),(0,r.kt)("p",null,"1.3 time vars"),(0,r.kt)("p",null,"The Bash Time Command"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Bash has a builtin time command to report how much time a process consumed",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"time find / -name core")))),(0,r.kt)("p",null,"Variables in Bash"),(0,r.kt)("p",null,"Grouping in Bash"),(0,r.kt)("p",null,"Bash Builtins"),(0,r.kt)("p",null,"1.4 profile bashrc"),(0,r.kt)("p",null,"Bash Startup"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},".bash_profile is read when Bash is invoked as a login shell. "),(0,r.kt)("li",{parentName:"ul"},".bashrc is executed when a new shell is started."),(0,r.kt)("li",{parentName:"ul"},"PATH=$PATH:/usr/local/bin ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This would keep adding /usr/local/bin to the end of PATH within nested shells.")))),(0,r.kt)("p",null,"1.5 Source"),(0,r.kt)("p",null,"1.6 echo"),(0,r.kt)("h2",{id:"2-variables-control-structures-and-arithmetic"},"2. Variables, Control Structures, and Arithmetic"),(0,r.kt)("p",null,"2.1 read_while_for"),(0,r.kt)("p",null,"The Read Command"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Read a line into a variable or multiple variables"),(0,r.kt)("li",{parentName:"ul"},"read a b -- reads first word into a and the rest into b"),(0,r.kt)("li",{parentName:"ul"},"Convenient for a while loop")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"While Loops")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"while\n    command list 1\ndo \n    command list\ndone\n#loops while command list 1 succeeds\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"while \n    ((x<10))\ndo\n    echo loop $x; date > data.$x\n    ((x=x+1))\ndone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"while \n    read a b\ndo\n    echo a is $a b is $b\ndone <data_file\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"ls -l | while \n    read a b c d\n    do\n      echo owner is $c\n    done\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For Loops")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"for <var> in <list>\ndo\n  command list\ndone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"for i in dog cat elephant\ndo\n  echo i is $i\ndone\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"* seq 1 5 # prints 1 2 3 4 5 \n* for num in `seq 1 5` # loops over 1 2 3 4 5 \n* generate sequences with {A..Z}, {1..10}, etc.\n* for d in $(<data_file) # loops over space/newline # separated data in data_file\n* for j in *.c # making a list with file globbing\n* for f in $(find . -name *.c) # using a coomand to generate a list\n")),(0,r.kt)("p",null,"2.2. func_return_exit"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bash Functions")),(0,r.kt)("p",null,"Give a name to a sequence of statements that will execute within shell, not in a new process"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"function NAME {\n    function body ...\n}\n")),(0,r.kt)("p",null,"Commonly used to organize code in a shell program"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"function printhello {\n    echo Hello\n}\n\nprinthello\n# shell memorizes the function like it's a new command\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The Return Command")),(0,r.kt)("p",null,"Function return when there are no more statements or when a return statement is executed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"function myfunc {\n    echo starting\n    return\n    echo this will not executed\n}\n")),(0,r.kt)("p",null,"Functions produce results by writing output like commands do."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"havr=$(printhello)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The Exit Command")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"exit ","<","VALUE",">"," sets the exit status, represented by $? to ","<","VALUE",">"),(0,r.kt)("li",{parentName:"ul"},"exit terminates the shell process."),(0,r.kt)("li",{parentName:"ul"},"exit in a function terminates the whole shell program, not just the function.")),(0,r.kt)("p",null,"2.4 redirect_here"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Redirections and Pipes")),(0,r.kt)("p",null,"Process normally have three files open:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"0 => stdin, \n1 => stdout, \n2 => stderr\n\ncommand > stdout-here 2> stderr-here < stdin-from-here\n    + > stdout-here \n    + 2> stderr-here \n    + < stdin-from-here\n\ncommand &> file \n# file gets stdout and stderr from command, file is created or overwritten\n\ncommand | command2 \n# command2's stdin comes from command's stdout\n\ncommand 2>&1 | command2 \n# gets stdout and stderr from command\n\ncommand |& command2 \n# alternative way for command2 to get command's stdout and stderr as its stdin\n\ncommand >> file \n# appends stdout of command to end of file\n\ncommand &>> file \n# appends stdout and stderr of command to end of file\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Here Documents: <<")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Here documents are a way to embed input for standard input inside of a script."),(0,r.kt)("li",{parentName:"ul"},"They avoid having to create a new file just to hold some input values. ")),(0,r.kt)("p",null,"sort <<END\ncherry\nbanana\napple\norange\nEND"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Open and Close File Descriptions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"echo hi > myfile \n# opens file descriptor hi for writing to myfile\n")),(0,r.kt)("h3",{id:"the-case-staement"},"The Case Staement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'case $ans in\n    yes|YES|y|Y|y.x) echo "Will do!";;\n    n*|N*) echo "Will NOT do!";;\n    *) echo "Oops!";;\nesac\n')),(0,r.kt)("h3",{id:"the-if-then-else-statement"},"The If-Then-Else Statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"if\n    grep -q important myfile\nthen\n    echo myfile has important stuff\nelse\n    echo myfile does not have important stuff\nfi\n")),(0,r.kt)("h3",{id:"test-in-bash"},"Test in Bash"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The builtin ",(0,r.kt)("em",{parentName:"li"},"test")," is used to check various conditions and set the return code with the result"),(0,r.kt)("li",{parentName:"ul"},"Loops and conditions often use the result of test."),(0,r.kt)("li",{parentName:"ul"},"An alternative to test is [","[ ]","] or (( ))")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"    if\n        test -f afile\n    fi\n\n    if [[ -f bfile]]\n    fi\n\n    if \n        test $x -gt 5\n    fi\n")),(0,r.kt)("p",null,"###Test Operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"    [[ ex1 -eq ex2 ]] [[ ex1 -ne ex2 ]]\n    [[ ex1 -lt ex2 ]] [[ ex1 -gt ex2 ]]\n    [[ ex1 -le ex2 ]] [[ ex1 -ge ex2 ]]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"    (( ex1 == ex2 )) (( ex1 != ex2 ))\n    (( ex1 < ex2 )) (( ex1 > ex2 ))\n    (( ex1 <= ex2 )) (( ex1 >= ex2 ))\n    (( ex1 && ex2 )) (( ex1 || ex2 ))\n")),(0,r.kt)("p",null,"More Tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"test -d X\n# success if X is a directory\n\ntest -f X\n# success if X is a regular file\n\ntest -s X\n# success if X exists and not empty\n\ntest -x X\n# success if you have x permission on X\n\ntest -w X\n# success if you have w permission on X\n\ntest -r X\n# success if you have r permission on X\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"#!/bin/bash\nif\n   test -x /bin/ls # test /bin/ls is executable\nthen\n   if\n   [ ! -w /etc/hosts ] # if /etc/hosts is not writable\n   then\n      if \n      echo about to look for foobar\n      grep -q foobar /etc/passwd\n      then\n         echo foobar found in /etc/passwd\n      else\n         echo foobar not found\n      fi\n   fi\nelse\n   echo Oh no, /bin/ls not executable\nfi\n")))}u.isMDXComponent=!0}}]);