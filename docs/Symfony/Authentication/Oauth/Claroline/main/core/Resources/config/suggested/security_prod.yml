security:

    providers:
        user_db:
            entity: { class: Claroline\CoreBundle\Entity\User }

    encoders:
        Claroline\CoreBundle\Entity\User: sha512

    firewalls:
        install:
            pattern: ^/install
            security: false

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        oauth_token:
            pattern:    ^/oauth/v2/token
            security:   false

        oauth_authorize:
            pattern:    ^/oauth/v2/auth
            form_login:
                check_path: /oauth/v2/auth_login_check
                login_path: /oauth/v2/auth_login
                default_target_path: /oauth/v2/auth/form
            anonymous: true

        api:
           pattern:    /(api|apiv2)/
           claro_api: true #do something about me
           #fos_oauth: true
           #stateless:  true
           security: true

        main:
            pattern: ^/
            simple_preauth:
                authenticator: claroline.security.authentication.ip_authenticator
            simple_form:
                authenticator: claroline.core_bundle.library.security.external_authenticator
                check_path: /login_check
            form_login:
                success_handler: claroline.security.authentication.success_handler
                failure_handler: claroline.security.authentication.failure_handler
            anonymous: ~
            logout: true
            switch_user: { role: ROLE_ALLOWED_TO_SWITCH, parameter: _switch }

            remember_me:
                secret:      "%secret%"
                lifetime: 31536000 # 365 days
                path:     /
                domain:   ~
            access_denied_handler: claroline.exception.access_denied_handler

        # Won't go here unless cas bundle is present and cas is activated
        cas:
            pattern: ^/
            anonymous: ~
            switch_user: { role: ROLE_ALLOWED_TO_SWITCH, parameter: _switch }
            # Same context as main firewall to work well with api
            context: main

    access_decision_manager:
        allow_if_all_abstain: false

    access_control:
        - { path: ^/oauth/v2/auth_login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,                  role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/connect, role: IS_AUTHENTICATED_ANONYMOUSLY }
